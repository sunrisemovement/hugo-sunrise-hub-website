{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/domready/ready.js","webpack:///./src/Home/Events/DayOfYear.ts","webpack:///./src/Home/Events/TimeOfDay.ts","webpack:///./src/Home/Events/Event.ts","webpack:///./node_modules/lit-html/lib/directive.js","webpack:///./node_modules/lit-html/lib/dom.js","webpack:///./node_modules/lit-html/lib/part.js","webpack:///./node_modules/lit-html/lib/template.js","webpack:///./node_modules/lit-html/lib/template-instance.js","webpack:///./node_modules/lit-html/lib/template-result.js","webpack:///./node_modules/lit-html/lib/parts.js","webpack:///./node_modules/lit-html/lib/default-template-processor.js","webpack:///./node_modules/lit-html/lib/template-factory.js","webpack:///./node_modules/lit-html/lib/render.js","webpack:///./node_modules/lit-html/lit-html.js","webpack:///./node_modules/lit-html/lib/modify-template.js","webpack:///./node_modules/lit-html/lib/shady-render.js","webpack:///./node_modules/lit-element/lib/updating-element.js","webpack:///./node_modules/lit-element/lib/decorators.js","webpack:///./node_modules/lit-element/lib/css-tag.js","webpack:///./node_modules/lit-element/lit-element.js","webpack:///./node_modules/lit-html/directives/class-map.js","webpack:///./src/Home/Events/MonthOfYear.ts","webpack:///./src/Home/Events/DayRange.ts","webpack:///./src/Home/Events/Calendar.ts","webpack:///./node_modules/lit-html/directives/unsafe-html.js","webpack:///./src/Home/Events/Icon.ts","webpack:///./src/Home/Events/Map.ts","webpack:///./src/Home/Events/Details.ts","webpack:///./src/Home/Events/index.ts","webpack:///./src/Home/index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","listener","fns","doc","hack","loaded","document","documentElement","doScroll","test","readyState","addEventListener","removeEventListener","shift","fn","setTimeout","push","DayOfYear","[object Object]","year","month","day","this","cachedNearestPreviousSunday","cachedNearestNextSaturday","other","date","toDate","setDate","getDate","getDay","fromDate","format","Intl","DateTimeFormat","toString","padStart","Date","getFullYear","getMonth","TimeOfDay","millis","hour12","hour","minute","Error","MILLIS_IN_A_DAY","Event_Event","description","title","url","address","place","start","coordinates","coordinate","startDate","time","valueOf","directives","WeakMap","directive_directive","f","args","set","isDirective","has","isCEPolyfill","undefined","window","customElements","polyfillWrapFlushCallback","removeNodes","container","end","nextSibling","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","result","element","parts","nodesToRemove","stack","walker","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","count","endsWith","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","type","tagName","currentNode","data","indexOf","parent","parentNode","lastIndex","insert","createMarker","match","createTextNode","insertBefore","previousSibling","pop","str","suffix","isTemplatePartActive","part","createComment","template_instance_TemplateInstance","template","processor","options","__parts","setValue","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","template_result_TemplateResult","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","isPrimitive","isIterable","Array","isArray","iterator","AttributeCommitter","dirty","_createPart","parts_AttributePart","text","v","setAttribute","_getValue","committer","directive","parts_NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","templateFactory","update","instance","_clone","itemParts","itemPart","item","appendIntoPart","insertAfterPart","parts_BooleanAttributePart","PropertyCommitter","super","single","PropertyPart","eventOptionsSupported","capture","_e","parts_EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","once","passive","shouldAddListener","__options","getOptions","event","defaultTemplateProcessor","prefix","templateCache","templateCaches","stringsArray","keyString","Map","join","getTemplateElement","render_parts","lit_html_html","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","styles","querySelectorAll","condensedStyle","style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","firstChild","querySelector","nativeShadow","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","Boolean","JSON","stringify","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","STATE_HAS_UPDATED","STATE_UPDATE_REQUESTED","STATE_IS_REFLECTING_TO_ATTRIBUTE","STATE_IS_REFLECTING_TO_PROPERTY","STATE_HAS_CONNECTED","UpdatingElement","HTMLElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","observedAttributes","finalize","_classProperties","attr","_attributeNameForProperty","_attributeToPropertyMap","superProperties","getPrototypeOf","k","_ensureClassProperties","noAccessor","oldValue","_requestUpdate","configurable","finalized","superCtor","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","fromAttribute","toAttribute","_saveInstanceProperties","constructor","_v","_attributeToProperty","ctor","attrValue","_propertyValueToAttribute","propName","_propertyValueFromAttribute","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","reject","previousUpdatePromise","res","rej","_hasConnected","performUpdate","hasUpdated","_applyInstanceProperties","shouldUpdate","changedProperties","_markUpdated","firstUpdated","updated","size","_propertyToAttribute","customElement","classOrDescriptor","clazz","define","legacyCustomElement","descriptor","kind","elements","standardCustomElement","standardProperty","placement","initializer","assign","legacyProperty","proto","protoOrDescriptor","supportsAdoptingStyleSheets","Document","CSSStyleSheet","constructionToken","CSSResult","cssText","safeToken","styleSheet","_styleSheet","replaceSync","css","reduce","acc","idx","textFromCSSResult","flattenStyles","flat","Infinity","arrayFlat","lit_element_LitElement","_styles","_getUniqueStyles","userStyles","reduceRight","unshift","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","adoptedStyleSheets","map","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","localName","connectedCallback","styleElement","templateResult","render","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","appendInto","delete","classMapCache","classMap","classInfo","className","classList","oldInfo","remove","MonthOfYear_MonthOfYear","cachedFirst","cachedLast","setMonth","amount","formatter","DayRange","final","tomorrow","current","equals","weekdays","Calendar_Calendar","Calendar_1","events","selected","now","whenDefined","label","scrollIntoView","behavior","block","inline","memo","next","array","entries","sort","compare","dispatchEvent","CustomEvent","eventDays","days","firstDay","nearestPreviousSunday","lastDay","nearestNextSaturday","onPreviousMonthClick","formatForSwitcher","onNextMonthClick","w","hasEvent","outOfMonth","contains","onDayClick","eventsByDay","events-event","onEventClick","__decorate","Events_Calendar","previousValues","unsafeHTML","previousValue","Icon_Icon","icon","Icon_decorate","Events_Icon","Range","min","max","radians","degrees","PI","latLonToRelativePos","lat","lon","x","y","log","tan","cos","sec","latLonToPos","zoom","numTiles","tileUrl","z","async","xRow","floor","tilesX","ceil","yRow","tilesY","xOffset","yOffset","trunc","tilePos","xAbsolute","yAbsolute","latCenterDiff","lonCenterDiff","tiles","row","canvas","width","height","context","getContext","fillStyle","fillRect","promises","rowOffset","colOffset","tile","Image","src","decode","drawImage","all","Map_Map","latitude","longitude","dependencies","Map_decorate","Events_Map","Details_Details","hubName","encodeURIComponent","Details_decorate","Events_Details","Events_Events","onSelect","target","sortedEvents","a","b","Events_decorate","Home_Events","ready_default","_data"],"mappings":"aACA,IAAAA,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,GAAA,CACAG,EAAAH,EACAI,GAAA,EACAH,QAAA,IAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,8BAIAlC,IAAAmC,EAAA,qBCzEC,IAEDC,EAAAC,EACAC,EACAC,EAEAC,EAVkCrC,EAAAD,SAMlCmC,EAAA,GACAC,EAAAG,SACAF,EAAAD,EAAAI,gBAAAC,UAEAH,GAAAD,EAAA,8BAAAK,KAAAN,EAAAO,cAIAP,EAAAQ,iBALA,mBAKAV,EAAA,WAGA,IAFAE,EAAAS,oBANA,mBAMAX,GACAI,EAAA,EACAJ,EAAAC,EAAAW,SAAAZ,MAGA,SAAAa,GACAT,EAAAU,WAAAD,EAAA,GAAAZ,EAAAc,KAAAF,+DCtBe,MAAMG,EAInBC,YACkBC,EACAC,EACAC,GAFAC,KAAAH,OACAG,KAAAF,QACAE,KAAAD,MANVC,KAAAC,4BAAgD,KAChDD,KAAAE,0BAA8C,KAQ/CN,OAAOO,GACZ,OAAOH,KAAKH,OAASM,EAAMN,MACtBG,KAAKF,QAAUK,EAAML,OACrBE,KAAKD,MAAQI,EAAMJ,IAGnBH,QAAQO,GACb,OAAIH,KAAKH,KAAOM,EAAMN,MAAc,EAC3BG,KAAKH,KAAOM,EAAMN,KAAa,EAElCG,KAAKF,MAAQK,EAAML,OAAe,EAC7BE,KAAKF,MAAQK,EAAML,MAAc,EAEpCE,KAAKD,IAAMI,EAAMJ,KAAa,EACzBC,KAAKD,IAAMI,EAAMJ,IAAY,EAC1B,EAKXH,wBACL,IAAKI,KAAKC,4BAA6B,CACrC,MAAMG,EAAOJ,KAAKK,SAClBD,EAAKE,QAAQF,EAAKG,UAAYH,EAAKI,UACnCR,KAAKC,4BAA8BD,KAAKS,SAASL,GAEnD,OAAOJ,KAAKC,4BAGPL,sBACL,IAAKI,KAAKE,0BAA2B,CACnC,MAAME,EAAOJ,KAAKK,SAClBD,EAAKE,QAAQF,EAAKG,WAAa,EAAIH,EAAKI,WACxCR,KAAKE,0BAA4BF,KAAKS,SAASL,GAEjD,OAAOJ,KAAKE,0BAGPN,WACL,MAAMQ,EAAOJ,KAAKK,SAElB,OADAD,EAAKE,QAAQF,EAAKG,UAAY,GACvBP,KAAKS,SAASL,GAGhBR,SAASc,GACd,OAAQA,GACN,IAAK,OACH,MAAMN,EAAOJ,KAAKK,SAMlB,OALkB,IAAIM,KAAKC,eAAe,QAAS,CACjDb,IAAK,UACLD,MAAO,OACPD,KAAM,YAESa,OAAON,GAC1B,IAAK,UACH,SAAUJ,KAAKH,SAASG,KAAKF,MAAQ,GAAGe,WAAWC,SAAS,EAAG,QAAQd,KAAKD,IAAIc,WAAWC,SAAS,EAAG,OACzG,QACE,yBAA0Bd,KAAKH,cAAcG,KAAKF,cAAcE,KAAKD,QAInEH,SACN,OAAO,IAAImB,KAAKf,KAAKH,KAAMG,KAAKF,MAAOE,KAAKD,KAGtCH,SAASQ,GACf,OAAO,IAAIT,EAAUS,EAAKY,cAAeZ,EAAKa,WAAYb,EAAKG,YC5EpD,MAAMW,EACnBtB,YACUuB,GAAAnB,KAAAmB,SAQHvB,SAASc,GACd,OAAOA,GACL,IAAK,OAAQ,CACX,MAAMN,EAAO,IAAIW,KAAKf,KAAKmB,QAM3B,OALkB,IAAIR,KAAKC,eAAe,QAAS,CACjDQ,QAAQ,EACRC,KAAM,UACNC,OAAQ,YAEOZ,OAAON,GAE1B,IAAK,UACH,MAAM,IAAImB,MAAM,mBAElB,QACE,2BAA4BvB,KAAKmB,YC1BzC,MAAMK,EAAkB,MAeT,MAAMC,EAUnB7B,aAAY8B,YACVA,EAAWC,MACXA,EAAKC,IACLA,EAAGC,QACHA,EAAOC,MACPA,EAAKC,MACLA,EAAKC,YACLA,IAEAhC,KAAK2B,MAAQA,EACb3B,KAAK8B,MAAQA,EACb9B,KAAK6B,QAAUA,EACf7B,KAAKiC,WAAaD,EAClBhC,KAAK4B,IAAMA,EACX5B,KAAK0B,YAAcA,EAEnB,MAAMQ,EAAY,IAAInB,KAAKgB,GAC3B/B,KAAKmC,KAAO,IAAIjB,EAAUgB,EAAUE,UAAYZ,GAChDxB,KAAKI,KAAO,IAAIT,EACduC,EAAUlB,cACVkB,EAAUjB,WACViB,EAAU3B;;;;;;;;;;;;;GCpChB,MAAA8B,EAAA,IAAAC,QAyCaC,EAASC,GAAA,IAAAC,KACtB,MAAAxF,EAAAuF,KAAAC,GAEA,OADAJ,EAAAK,IAAAzF,GAAA,GACAA,GAEO0F,EAAAvF,GACP,mBAAAA,GAAAiF,EAAAO,IAAAxF,GC5COyF,OAAAC,IAAAC,OAAAC,qBAEPF,IADAC,OAAAC,eAAAC,0BAkBOC,EAAA,CAAAC,EAAApB,EAAAqB,EAAA,QACP,KAAArB,IAAAqB,GAAA,CACA,MAAAhF,EAAA2D,EAAAsB,YACAF,EAAAG,YAAAvB,GACAA,EAAA3D,ICtBOmF,EAAA,GAIAC,EAAA,GCJAC,WAAwBC,OAAAC,KAAAC,UAAAC,MAAA,OAKxBC,YAA0BL,UAC1BM,EAAA,IAAAC,UAAkCP,KAAUK,KAI5CG,EAAA,QAIA,MAAAC,EACPtE,YAAAuE,EAAAC,GACApE,KAAAqE,MAAA,GACArE,KAAAoE,UACA,MAAAE,EAAA,GACAC,EAAA,GAEAC,EAAAxF,SAAAyF,iBAAAL,EAAAM,QAAA,IAA+G,SAI/G,IAAAC,EAAA,EACAC,GAAA,EACAC,EAAA,EACA,MAAAC,QAAeA,EAAAC,QAAAC,OAAmBA,IAAWb,EAC7C,KAAAU,EAAAG,GAAA,CACA,MAAAC,EAAAT,EAAAU,WACA,UAAAD,GASA,GADAL,IACA,IAAAK,EAAAE,SAAA,CACA,GAAAF,EAAAG,gBAAA,CACA,MAAAC,EAAAJ,EAAAI,YACAL,OAA2BA,GAASK,EAMpC,IAAAC,EAAA,EACA,QAAA3I,EAAA,EAAmCA,EAAAqI,EAAYrI,IAC/C4I,EAAAF,EAAA1I,GAAAO,KAAA+G,IACAqB,IAGA,KAAAA,KAAA,IAGA,MAAAE,EAAAV,EAAAD,GAEA3H,EAAAuI,EAAAC,KAAAF,GAAA,GAMAG,EAAAzI,EAAA0I,cAAA3B,EACA4B,EAAAZ,EAAAa,aAAAH,GACAV,EAAAc,gBAAAJ,GACA,MAAAK,EAAAH,EAAAI,MAAAlC,GACA/D,KAAAqE,MAAA3E,KAAA,CAAyCwG,KAAA,YAAAtB,QAAA1H,OAAA4H,QAAAkB,IACzCnB,GAAAmB,EAAAhB,OAAA,GAGA,aAAAC,EAAAkB,UACA5B,EAAA7E,KAAAuF,GACAT,EAAA4B,YAAAnB,EAAAP,cAGA,OAAAO,EAAAE,SAAA,CACA,MAAAkB,EAAApB,EAAAoB,KACA,GAAAA,EAAAC,QAAA7C,IAAA,GACA,MAAA8C,EAAAtB,EAAAuB,WACA1B,EAAAuB,EAAAJ,MAAAlC,GACA0C,EAAA3B,EAAAE,OAAA,EAGA,QAAArI,EAAA,EAAmCA,EAAA8J,EAAe9J,IAAA,CAClD,IAAA+J,EACAhI,EAAAoG,EAAAnI,GACA,QAAA+B,EACAgI,EAAAC,QAEA,CACA,MAAAC,EAAAnB,EAAAC,KAAAhH,GACA,OAAAkI,GAAArB,EAAAqB,EAAA,GAAA3C,KACAvF,IAAAmF,MAAA,EAAA+C,EAAAhC,OAAAgC,EAAA,GACAA,EAAA,GAAA/C,MAAA,GAAAI,EAAAe,QAAA4B,EAAA,IAEAF,EAAA1H,SAAA6H,eAAAnI,GAEA6H,EAAAO,aAAAJ,EAAAzB,GACAjF,KAAAqE,MAAA3E,KAAA,CAAyCwG,KAAA,OAAAtB,YAIzC,KAAAE,EAAA2B,IACAF,EAAAO,aAAAH,IAAA1B,GACAX,EAAA5E,KAAAuF,IAGAA,EAAAoB,KAAAvB,EAAA2B,GAGA5B,GAAA4B,QAGA,OAAAxB,EAAAE,SACA,GAAAF,EAAAoB,OAAA5C,EAAA,CACA,MAAA8C,EAAAtB,EAAAuB,WAKA,OAAAvB,EAAA8B,iBAAAnC,IAAAD,IACAC,IACA2B,EAAAO,aAAAH,IAAA1B,IAEAN,EAAAC,EACA5E,KAAAqE,MAAA3E,KAAA,CAAqCwG,KAAA,OAAAtB,UAGrC,OAAAK,EAAA5B,YACA4B,EAAAoB,KAAA,IAGA/B,EAAA5E,KAAAuF,GACAL,KAEAC,QAEA,CACA,IAAAlI,GAAA,EACA,WAAAA,EAAAsI,EAAAoB,KAAAC,QAAA7C,EAAA9G,EAAA,KAKAqD,KAAAqE,MAAA3E,KAAA,CAAyCwG,KAAA,OAAAtB,OAAA,IACzCC,UAjHAL,EAAA4B,YAAA7B,EAAAyC,MAuHA,UAAA5I,KAAAkG,EACAlG,EAAAoI,WAAAlD,YAAAlF,IAIA,MAAAmH,EAAA,CAAA0B,EAAAC,KACA,MAAAtC,EAAAqC,EAAAjC,OAAAkC,EAAAlC,OACA,OAAAJ,GAAA,GAAAqC,EAAApD,MAAAe,KAAAsC,GAEOC,EAAAC,IAAA,IAAAA,EAAAxC,MAGA+B,EAAA,IAAA3H,SAAAqI,cAAA,IA2BA5B,EAAA;;;;;;;;;;;;;;AC7LA,MAAM6B,EACb1H,YAAA2H,EAAAC,EAAAC,GACAzH,KAAA0H,QAAA,GACA1H,KAAAuH,WACAvH,KAAAwH,YACAxH,KAAAyH,UAEA7H,OAAAmF,GACA,IAAApI,EAAA,EACA,UAAAyK,KAAApH,KAAA0H,aACA5E,IAAAsE,GACAA,EAAAO,SAAA5C,EAAApI,IAEAA,IAEA,UAAAyK,KAAApH,KAAA0H,aACA5E,IAAAsE,GACAA,EAAAQ,SAIAhI,SAsCA,MAAAiI,EAAyBhF,EACzB7C,KAAAuH,SAAAnD,QAAAM,QAAAoD,WAAA,GACA9I,SAAA+I,WAAA/H,KAAAuH,SAAAnD,QAAAM,SAAA,GACAH,EAAA,GACAF,EAAArE,KAAAuH,SAAAlD,MAEAG,EAAAxF,SAAAyF,iBAAAoD,EAAA,IAAwG,SACxG,IAEAT,EAFAvC,EAAA,EACAmD,EAAA,EAEA/C,EAAAT,EAAAU,WAEA,KAAAL,EAAAR,EAAAW,QAEA,GADAoC,EAAA/C,EAAAQ,GACiBsC,EAAoBC,GAArC,CAQA,KAAAY,EAAAZ,EAAAxC,OACAoD,IACA,aAAA/C,EAAAgD,WACA1D,EAAA7E,KAAAuF,GACAT,EAAA4B,YAAAnB,EAAAP,SAEA,QAAAO,EAAAT,EAAAU,cAKAV,EAAA4B,YAAA7B,EAAAyC,MACA/B,EAAAT,EAAAU,YAIA,YAAAkC,EAAAlB,KAAA,CACA,MAAAkB,EAAApH,KAAAwH,UAAAU,qBAAAlI,KAAAyH,SACAL,EAAAe,gBAAAlD,EAAA8B,iBACA/G,KAAA0H,QAAAhI,KAAA0H,QAGApH,KAAA0H,QAAAhI,QAAAM,KAAAwH,UAAAY,2BAAAnD,EAAAmC,EAAAlK,KAAAkK,EAAAtC,QAAA9E,KAAAyH,UAEA5C,SA/BA7E,KAAA0H,QAAAhI,UAAAoD,GACA+B,IAoCA,OAJYhC,IACZ7D,SAAAqJ,UAAAR,GACA7E,eAAAsF,QAAAT,IAEAA;;;;;;;;;;;;;GC/GO,MAAMU,EACb3I,YAAAkF,EAAAC,EAAAmB,EAAAsB,GACAxH,KAAA8E,UACA9E,KAAA+E,SACA/E,KAAAkG,OACAlG,KAAAwH,YAKA5H,UACA,MAAAhD,EAAAoD,KAAA8E,QAAAE,OAAA,EACA,IAAAwD,EAAA,GACAC,GAAA,EACA,QAAA9L,EAAA,EAAuBA,EAAAC,EAAOD,IAAA,CAC9B,MAAA+B,EAAAsB,KAAA8E,QAAAnI,GAkBA+L,EAAAhK,EAAAiK,YAAA,WAIAF,GAAAC,GAAA,GAAAD,KACA,IAAA/J,EAAA4H,QAAA,SAAAoC,EAAA,GAIA,MAAAE,EAAmCnD,EAAsBC,KAAAhH,GAOzD8J,GANA,OAAAI,EAMAlK,GAAA+J,EAAgDhF,EAASK,GAMzDpF,EAAAmK,OAAA,EAAAD,EAAAhE,OAAAgE,EAAA,GACAA,EAAA,GAAwC3E,EAAoB2E,EAAA,GACxCnF,EAIpB,OADA+E,GAAAxI,KAAA8E,QAAAlI,GAGAgD,qBACA,MAAA2H,EAAAvI,SAAA8J,cAAA,YAEA,OADAvB,EAAAwB,UAAA/I,KAAAgJ,UACAzB;;;;;;;;;;;;;;AClEO,MAAA0B,EAAArL,GACP,OAAAA,KACA,iBAAAA,GAAA,mBAAAA,GAEOsL,EAAAtL,GACPuL,MAAAC,QAAAxL,OAEAA,MAAAF,OAAA2L,WAOO,MAAAC,EACP1J,YAAAwE,EAAAlH,EAAA4H,GACA9E,KAAAuJ,OAAA,EACAvJ,KAAAoE,UACApE,KAAA9C,OACA8C,KAAA8E,UACA9E,KAAAqE,MAAA,GACA,QAAA1H,EAAA,EAAuBA,EAAAmI,EAAAE,OAAA,EAAwBrI,IAC/CqD,KAAAqE,MAAA1H,GAAAqD,KAAAwJ,cAMA5J,cACA,WAAmB6J,EAAazJ,MAEhCJ,YACA,MAAAkF,EAAA9E,KAAA8E,QACAlI,EAAAkI,EAAAE,OAAA,EACA,IAAA0E,EAAA,GACA,QAAA/M,EAAA,EAAuBA,EAAAC,EAAOD,IAAA,CAC9B+M,GAAA5E,EAAAnI,GACA,MAAAyK,EAAApH,KAAAqE,MAAA1H,GACA,QAAAmG,IAAAsE,EAAA,CACA,MAAAuC,EAAAvC,EAAAxJ,MACA,GAAAqL,EAAAU,KAAAT,EAAAS,GACAD,GAAA,iBAAAC,IAAAjG,OAAAiG,QAGA,UAAA9L,KAAA8L,EACAD,GAAA,iBAAA7L,IAAA6F,OAAA7F,IAMA,OADA6L,GAAA5E,EAAAlI,GAGAgD,SACAI,KAAAuJ,QACAvJ,KAAAuJ,OAAA,EACAvJ,KAAAoE,QAAAwF,aAAA5J,KAAA9C,KAAA8C,KAAA6J,eAOO,MAAMJ,EACb7J,YAAAkK,GACA9J,KAAApC,WAAAkF,EACA9C,KAAA8J,YAEAlK,SAAAhC,GACAA,IAAsB2F,GAAQ0F,EAAArL,QAAAoC,KAAApC,QAC9BoC,KAAApC,QAIiB+E,EAAW/E,KAC5BoC,KAAA8J,UAAAP,OAAA,IAIA3J,SACA,KAAe+C,EAAW3C,KAAApC,QAAA,CAC1B,MAAAmM,EAAA/J,KAAApC,MACAoC,KAAApC,MAAyB2F,EACzBwG,EAAA/J,MAEAA,KAAApC,QAA2B2F,GAG3BvD,KAAA8J,UAAAlC,UAWO,MAAMoC,EACbpK,YAAA6H,GACAzH,KAAApC,WAAAkF,EACA9C,KAAAiK,oBAAAnH,EACA9C,KAAAyH,UAOA7H,WAAAuD,GACAnD,KAAAkK,UAAA/G,EAAAgH,YAA+CxD,KAC/C3G,KAAAoK,QAAAjH,EAAAgH,YAA6CxD,KAS7C/G,gBAAAyK,GACArK,KAAAkK,UAAAG,EACArK,KAAAoK,QAAAC,EAAAhH,YAOAzD,eAAAwH,GACAA,EAAAkD,SAAAtK,KAAAkK,UAAuCvD,KACvCS,EAAAkD,SAAAtK,KAAAoK,QAAqCzD,KAOrC/G,gBAAAyK,GACAA,EAAAC,SAAAtK,KAAAkK,UAAsCvD,KACtC3G,KAAAoK,QAAAC,EAAAD,QACAC,EAAAD,QAAApK,KAAAkK,UAEAtK,SAAAhC,GACAoC,KAAAiK,eAAArM,EAEAgC,SACA,KAAe+C,EAAW3C,KAAAiK,iBAAA,CAC1B,MAAAF,EAAA/J,KAAAiK,eACAjK,KAAAiK,eAAkC1G,EAClCwG,EAAA/J,MAEA,MAAApC,EAAAoC,KAAAiK,eACArM,IAAsB2F,IAGtB0F,EAAArL,GACAA,IAAAoC,KAAApC,OACAoC,KAAAuK,aAAA3M,GAGAA,aAAkC2K,EAClCvI,KAAAwK,uBAAA5M,GAEAA,aAAA6M,KACAzK,KAAA0K,aAAA9M,GAEAsL,EAAAtL,GACAoC,KAAA2K,iBAAA/M,GAEAA,IAA2B4F,GAC3BxD,KAAApC,MAAyB4F,EACzBxD,KAAA4K,SAIA5K,KAAAuK,aAAA3M,IAGAgC,SAAAqF,GACAjF,KAAAoK,QAAA5D,WAAAM,aAAA7B,EAAAjF,KAAAoK,SAEAxK,aAAAhC,GACAoC,KAAApC,YAGAoC,KAAA4K,QACA5K,KAAAsK,SAAA1M,GACAoC,KAAApC,SAEAgC,aAAAhC,GACA,MAAAqH,EAAAjF,KAAAkK,UAAA7G,YACAzF,EAAA,MAAAA,EAAA,GAAAA,EACAqH,IAAAjF,KAAAoK,QAAArD,iBACA,IAAA9B,EAAAE,SAIAF,EAAAoB,KAAAzI,EAGAoC,KAAA0K,aAAA1L,SAAA6H,eAAA,iBAAAjJ,IAAA8F,OAAA9F,KAEAoC,KAAApC,QAEAgC,uBAAAhC,GACA,MAAA2J,EAAAvH,KAAAyH,QAAAoD,gBAAAjN,GACA,GAAAoC,KAAApC,iBAAkC0J,GAClCtH,KAAApC,MAAA2J,aACAvH,KAAApC,MAAAkN,OAAAlN,EAAAmH,YAEA,CAKA,MAAAgG,EAAA,IAAiCzD,EAAgBC,EAAA3J,EAAA4J,UAAAxH,KAAAyH,SACjDI,EAAAkD,EAAAC,SACAD,EAAAD,OAAAlN,EAAAmH,QACA/E,KAAA0K,aAAA7C,GACA7H,KAAApC,MAAAmN,GAGAnL,iBAAAhC,GAUAuL,MAAAC,QAAApJ,KAAApC,SACAoC,KAAApC,MAAA,GACAoC,KAAA4K,SAIA,MAAAK,EAAAjL,KAAApC,MACA,IACAsN,EADArG,EAAA,EAEA,UAAAsG,KAAAvN,OAIAkF,KAFAoI,EAAAD,EAAApG,MAGAqG,EAAA,IAA+BlB,EAAQhK,KAAAyH,SACvCwD,EAAAvL,KAAAwL,GACA,IAAArG,EACAqG,EAAAE,eAAApL,MAGAkL,EAAAG,gBAAAJ,EAAApG,EAAA,KAGAqG,EAAAvD,SAAAwD,GACAD,EAAAtD,SACA/C,IAEAA,EAAAoG,EAAAjG,SAEAiG,EAAAjG,OAAAH,EACA7E,KAAA4K,MAAAM,KAAAd,UAGAxK,MAAAsK,EAAAlK,KAAAkK,WACQhH,EAAWlD,KAAAkK,UAAA1D,WAAA0D,EAAA7G,YAAArD,KAAAoK,UAUZ,MAAMkB,EACb1L,YAAAwE,EAAAlH,EAAA4H,GAGA,GAFA9E,KAAApC,WAAAkF,EACA9C,KAAAiK,oBAAAnH,EACA,IAAAgC,EAAAE,QAAA,KAAAF,EAAA,SAAAA,EAAA,GACA,UAAAvD,MAAA,2DAEAvB,KAAAoE,UACApE,KAAA9C,OACA8C,KAAA8E,UAEAlF,SAAAhC,GACAoC,KAAAiK,eAAArM,EAEAgC,SACA,KAAe+C,EAAW3C,KAAAiK,iBAAA,CAC1B,MAAAF,EAAA/J,KAAAiK,eACAjK,KAAAiK,eAAkC1G,EAClCwG,EAAA/J,MAEA,GAAAA,KAAAiK,iBAAoC1G,EACpC,OAEA,MAAA3F,IAAAoC,KAAAiK,eACAjK,KAAApC,YACAA,EACAoC,KAAAoE,QAAAwF,aAAA5J,KAAA9C,KAAA,IAGA8C,KAAAoE,QAAA2B,gBAAA/F,KAAA9C,MAEA8C,KAAApC,SAEAoC,KAAAiK,eAA8B1G,GAYvB,MAAAgI,UAAAjC,EACP1J,YAAAwE,EAAAlH,EAAA4H,GACA0G,MAAApH,EAAAlH,EAAA4H,GACA9E,KAAAyL,OACA,IAAA3G,EAAAE,QAAA,KAAAF,EAAA,SAAAA,EAAA,GAEAlF,cACA,WAAA8L,EAAA1L,MAEAJ,YACA,OAAAI,KAAAyL,OACAzL,KAAAqE,MAAA,GAAAzG,MAEA4N,MAAA3B,YAEAjK,SACAI,KAAAuJ,QACAvJ,KAAAuJ,OAAA,EAEAvJ,KAAAoE,QAAApE,KAAA9C,MAAA8C,KAAA6J,cAIO,MAAA6B,UAA2BjC,GAMlC,IAAAkC,GAAA,EACA,IACA,MAAAlE,EAAA,CACAmE,cAEA,OADAD,GAAA,GACA,IAIA5I,OAAA1D,iBAAA,OAAAoI,KAEA1E,OAAAzD,oBAAA,OAAAmI,KAEA,MAAAoE,IAEO,MAAMC,EACblM,YAAAwE,EAAA2H,EAAAC,GACAhM,KAAApC,WAAAkF,EACA9C,KAAAiK,oBAAAnH,EACA9C,KAAAoE,UACApE,KAAA+L,YACA/L,KAAAgM,eACAhM,KAAAiM,mBAAAC,GAAAlM,KAAAmM,YAAAD,GAEAtM,SAAAhC,GACAoC,KAAAiK,eAAArM,EAEAgC,SACA,KAAe+C,EAAW3C,KAAAiK,iBAAA,CAC1B,MAAAF,EAAA/J,KAAAiK,eACAjK,KAAAiK,eAAkC1G,EAClCwG,EAAA/J,MAEA,GAAAA,KAAAiK,iBAAoC1G,EACpC,OAEA,MAAA6I,EAAApM,KAAAiK,eACAoC,EAAArM,KAAApC,MACA0O,EAAA,MAAAF,GACA,MAAAC,IACAD,EAAAR,UAAAS,EAAAT,SACAQ,EAAAG,OAAAF,EAAAE,MACAH,EAAAI,UAAAH,EAAAG,SACAC,EAAA,MAAAL,IAAA,MAAAC,GAAAC,GACAA,GACAtM,KAAAoE,QAAA9E,oBAAAU,KAAA+L,UAAA/L,KAAAiM,mBAAAjM,KAAA0M,WAEAD,IACAzM,KAAA0M,UAAAC,EAAAP,GACApM,KAAAoE,QAAA/E,iBAAAW,KAAA+L,UAAA/L,KAAAiM,mBAAAjM,KAAA0M,YAEA1M,KAAApC,MAAAwO,EACApM,KAAAiK,eAA8B1G,EAE9B3D,YAAAgN,GACA,mBAAA5M,KAAApC,MACAoC,KAAApC,MAAAd,KAAAkD,KAAAgM,cAAAhM,KAAAoE,QAAAwI,GAGA5M,KAAApC,MAAAuO,YAAAS,IAOA,MAAAD,EAAAvP,OACAuO,EACA,CAASC,QAAAxO,EAAAwO,QAAAY,QAAApP,EAAAoP,QAAAD,KAAAnP,EAAAmP,MACTnP,EAAAwO;;;;;;;;;;;;;GCzYO,MAAAiB,EAAA,IAjCA,MAUPjN,2BAAAwE,EAAAlH,EAAA4H,EAAA2C,GACA,MAAAqF,EAAA5P,EAAA,GACA,YAAA4P,EACA,IAAkCvB,EAAiBnH,EAAAlH,EAAA2G,MAAA,GAAAiB,GACnDT,MAEA,MAAAyI,EACA,KAAwBhB,EAAS1H,EAAAlH,EAAA2G,MAAA,GAAA4D,EAAAuE,eAEjC,MAAAc,EACA,KAAwBxB,EAAoBlH,EAAAlH,EAAA2G,MAAA,GAAAiB,IAE5C,IAA8BwE,EAAkBlF,EAAAlH,EAAA4H,GAChDT,MAMAzE,qBAAA6H,GACA,WAAmBuC,EAAQvC;;;;;;;;;;;;;GC7BpB,SAAAoD,EAAA1G,GACP,IAAA4I,EAAAC,EAAAxP,IAAA2G,EAAA+B,WACApD,IAAAiK,IACAA,EAAA,CACAE,aAAA,IAAA3K,QACA4K,UAAA,IAAAC,KAEAH,EAAAtK,IAAAyB,EAAA+B,KAAA6G,IAEA,IAAAxF,EAAAwF,EAAAE,aAAAzP,IAAA2G,EAAAW,SACA,QAAAhC,IAAAyE,EACA,OAAAA,EAIA,MAAArJ,EAAAiG,EAAAW,QAAAsI,KAAoC3J,GAWpC,YARAX,KADAyE,EAAAwF,EAAAG,UAAA1P,IAAAU,MAGAqJ,EAAA,IAAuBrD,EAAQC,IAAAkJ,sBAE/BN,EAAAG,UAAAxK,IAAAxE,EAAAqJ,IAGAwF,EAAAE,aAAAvK,IAAAyB,EAAAW,QAAAyC,GACAA,EAEO,MAAAyF,EAAA,IAAAG,IC3BMG,EAAK,IAAAhL;;;;;;;;;;;;;;;;;;;;;;;;;;;CC2BlBS,OAAA,kBAAAA,OAAA,qBAAArD,KAAA,SAKO,MAAM6N,EAAI,CAAAzI,KAAAC,IAAA,IAA+BwD,EAAczD,EAAAC,EAAA,OAA0B8H,GClCxFW,EAAA,IAiBO,SAAAC,EAAAlG,EAAAjD,GACP,MAAWF,SAAAM,QAAWA,GAAUL,SAASkD,EACzC/C,EAAAxF,SAAAyF,iBAAAC,EAAA8I,EAAA,SACA,IAAA3I,EAAA6I,EAAArJ,GACA+C,EAAA/C,EAAAQ,GACAmD,GAAA,EACA2F,EAAA,EACA,MAAAC,EAAA,GACA,IAAAC,EAAA,KACA,KAAArJ,EAAAU,YAAA,CACA8C,IACA,MAAA/C,EAAAT,EAAA4B,YAiBA,IAfAnB,EAAA8B,kBAAA8G,IACAA,EAAA,MAGAvJ,EAAA1B,IAAAqC,KACA2I,EAAAlO,KAAAuF,GAEA,OAAA4I,IACAA,EAAA5I,IAIA,OAAA4I,GACAF,SAEA7K,IAAAsE,KAAAxC,QAAAoD,GAGAZ,EAAAxC,MAAA,OAAAiJ,GAAA,EAAAzG,EAAAxC,MAAA+I,EAGAvG,EAAA/C,EADAQ,EAAA6I,EAAArJ,EAAAQ,IAIA+I,EAAAE,QAAA1P,KAAAoI,WAAAlD,YAAAlF,IAEA,MAAA2P,EAAA9I,IACA,IAAAK,EAAA,KAAAL,EAAAE,SAAA,IACA,MAAAX,EAAAxF,SAAAyF,iBAAAQ,EAAAuI,EAAA,SACA,KAAAhJ,EAAAU,YACAI,IAEA,OAAAA,GAEAoI,EAAA,CAAArJ,EAAA2J,GAAA,KACA,QAAArR,EAAAqR,EAAA,EAAgCrR,EAAA0H,EAAAW,OAAkBrI,IAAA,CAClD,MAAAyK,EAAA/C,EAAA1H,GACA,GAAYwK,EAAoBC,GAChC,OAAAzK,EAGA;;;;;;;;;;;;;;ACvDA,MAAAsR,EAAA,CAAA/H,EAAAgI,OAAoDhI,MAASgI,IAC7D,IAAAC,GAAA,OACA,IAAApL,OAAAqL,SACAD,GAAA,OAEA,IAAApL,OAAAqL,SAAAC,qBACAC,QAAAC,KAAA,6IAGAJ,GAAA,GAMA,MAAAK,EAAAN,GAAA/J,IACA,MAAAsK,EAAAR,EAAA9J,EAAA+B,KAAAgI,GACA,IAAAnB,EAAwBC,EAAcxP,IAAAiR,QACtC3L,IAAAiK,IACAA,EAAA,CACAE,aAAA,IAAA3K,QACA4K,UAAA,IAAAC,KAEQH,EAActK,IAAA+L,EAAA1B,IAEtB,IAAAxF,EAAAwF,EAAAE,aAAAzP,IAAA2G,EAAAW,SACA,QAAAhC,IAAAyE,EACA,OAAAA,EAEA,MAAArJ,EAAAiG,EAAAW,QAAAsI,KAAoC3J,GAEpC,QAAAX,KADAyE,EAAAwF,EAAAG,UAAA1P,IAAAU,IACA,CACA,MAAAkG,EAAAD,EAAAkJ,qBACAc,GACApL,OAAAqL,SAAAC,mBAAAjK,EAAA8J,GAEA3G,EAAA,IAAuBrD,EAAQC,EAAAC,GAC/B2I,EAAAG,UAAAxK,IAAAxE,EAAAqJ,GAGA,OADAwF,EAAAE,aAAAvK,IAAAyB,EAAAW,QAAAyC,GACAA,GAEAmH,EAAA,eAoBAC,EAAA,IAAAC,IAeAC,EAAA,CAAAC,EAAAvH,EAAA2G,KACAS,EAAAI,IAAAb,GAEA,MAAAc,EAAAF,EAAAG,iBAAA,UACAjK,OAAWA,GAASgK,EAEpB,OAAAhK,EAKA,YADAjC,OAAAqL,SAAAS,sBAAAtH,EAAAnD,QAAA8J,GAGA,MAAAgB,EAAAlQ,SAAA8J,cAAA,SAMA,QAAAnM,EAAA,EAAmBA,EAAAqI,EAAYrI,IAAA,CAC/B,MAAAwS,EAAAH,EAAArS,GACAwS,EAAA3I,WAAAlD,YAAA6L,GACAD,EAAAE,aAAAD,EAAAC,YArDA,CAAAlB,IACAQ,EAAAZ,QAAA5H,IACA,MAAAmJ,EAA0BrC,EAAcxP,IAAAyQ,EAAA/H,EAAAgI,SACxCpL,IAAAuM,GACAA,EAAAnC,UAAAY,QAAAvG,IACA,MAAuBnD,SAAAM,QAAWA,IAAY6C,EAE9CyH,EAAA,IAAAJ,IACAzF,MAAAmG,KAAA5K,EAAAuK,iBAAA,UAAAnB,QAAApP,IACAsQ,EAAAD,IAAArQ,KAEgB+O,EAAuBlG,EAAAyH,QA6CvCO,CAAArB,GAGA,MAAAxJ,EAAA6C,EAAAnD,QAAAM,SD3CO,SAAA6C,EAAAtC,EAAAuK,EAAA,MACP,MAAWpL,SAAAM,QAAWA,GAAUL,SAASkD,EAGzC,GAAAiI,QAEA,YADA9K,EAAAyF,YAAAlF,GAGA,MAAAT,EAAAxF,SAAAyF,iBAAAC,EAAA8I,EAAA,SACA,IAAA3I,EAAA6I,EAAArJ,GACAoL,EAAA,EACAC,GAAA,EACA,KAAAlL,EAAAU,YAOA,IANAwK,IACAlL,EAAA4B,cACAoJ,IACAC,EAAA1B,EAAA9I,GACAuK,EAAAhJ,WAAAM,aAAA7B,EAAAuK,KAEA,IAAA3K,GAAAR,EAAAQ,GAAAD,QAAA8K,GAAA,CAEA,GAAAD,EAAA,GACA,UAAA5K,GACAR,EAAAQ,GAAAD,OAAA6K,EACA5K,EAAA6I,EAAArJ,EAAAQ,GAEA,OAEAA,EAAA6I,EAAArJ,EAAAQ,ICgBI8K,CAAsBpI,EAAA2H,EAAAxK,EAAAkL,YAI1B7M,OAAAqL,SAAAS,sBAAAtH,EAAAnD,QAAA8J,GACA,MAAAiB,EAAAzK,EAAAmL,cAAA,SACA,GAAA9M,OAAAqL,SAAA0B,cAAA,OAAAX,EAGAL,EAAAhI,aAAAqI,EAAArH,WAAA,GAAAgH,EAAAc,gBAEA,CASAlL,EAAAoC,aAAAoI,EAAAxK,EAAAkL,YACA,MAAAG,EAAA,IAAAnB,IACAmB,EAAAhB,IAAAG,GACQzB,EAAuBlG,EAAAwI;;;;;;;;;;;;;;AC/I/BhN,OAAAiN,0BACA,CAAAC,EAAAC,IAAAD,EACO,MAAAE,EAAA,CACPvQ,YAAAhC,EAAAsI,GACA,OAAAA,GACA,KAAAkK,QACA,OAAAxS,EAAA,QACA,KAAAP,OACA,KAAA8L,MAGA,aAAAvL,IAAAyS,KAAAC,UAAA1S,GAEA,OAAAA,GAEAgC,cAAAhC,EAAAsI,GACA,OAAAA,GACA,KAAAkK,QACA,cAAAxS,EACA,KAAA2S,OACA,cAAA3S,EAAA,KAAA2S,OAAA3S,GACA,KAAAP,OACA,KAAA8L,MACA,OAAAkH,KAAAG,MAAA5S,GAEA,OAAAA,IAOO6S,GAAA,CAAA7S,EAAA8S,IAEPA,IAAA9S,IAAA8S,MAAA9S,MAEA+S,GAAA,CACAC,WAAA,EACA1K,KAAAxC,OACAmN,UAAAV,EACAW,SAAA,EACAC,WAAAN,IAEAO,GAAAC,QAAAC,SAAA,GACAC,GAAA,EACAC,GAAA,EACAC,GAAA,EACAC,GAAA,GACAC,GAAA,GAMO,MAAAC,WAAAC,YACP7R,cACA4L,QACAxL,KAAA0R,aAAA,EACA1R,KAAA2R,yBAAA7O,EACA9C,KAAA4R,eAAAZ,GACAhR,KAAA6R,2BAAA/O,EAKA9C,KAAA8R,mBAAA,IAAA3E,IAIAnN,KAAA+R,2BAAAjP,EACA9C,KAAAgS,aAMAC,gCAEAjS,KAAAkS,WACA,MAAA7M,EAAA,GAUA,OAPArF,KAAAmS,iBAAArE,QAAA,CAAAnE,EAAAlL,KACA,MAAA2T,EAAApS,KAAAqS,0BAAA5T,EAAAkL,QACA7G,IAAAsP,IACApS,KAAAsS,wBAAA5P,IAAA0P,EAAA3T,GACA4G,EAAA3F,KAAA0S,MAGA/M,EAQAzF,gCAEA,IAAAI,KAAAxB,eAAAwR,0BAAA,mBAAAhQ,OAAA,CACAA,KAAAmS,iBAAA,IAAAhF,IAEA,MAAAoF,EAAAlV,OAAAmV,eAAAxS,MAAAmS,sBACArP,IAAAyP,GACAA,EAAAzE,QAAA,CAAAnE,EAAA8I,IAAAzS,KAAAmS,iBAAAzP,IAAA+P,EAAA9I,KAWA/J,sBAAA1C,EAAAuK,EAAAkJ,IAWA,GAPA3Q,KAAA0S,yBACA1S,KAAAmS,iBAAAzP,IAAAxF,EAAAuK,GAMAA,EAAAkL,YAAA3S,KAAAzB,UAAAC,eAAAtB,GACA,OAEA,MAAAgB,EAAA,iBAAAhB,EAAAQ,cAA+DR,IAC/DG,OAAAC,eAAA0C,KAAAzB,UAAArB,EAAA,CAEA0C,MACA,OAAAI,KAAA9B,IAEA0B,IAAAhC,GACA,MAAAgV,EAAA5S,KAAA9C,GACA8C,KAAA9B,GAAAN,EACAoC,KAAA6S,eAAA3V,EAAA0V,IAEAE,cAAA,EACAvV,YAAA,IAQAqC,kBACA,GAAAI,KAAAxB,eAAAwR,0BAAA,YAAAhQ,QACAA,KAAA+S,UACA,OAGA,MAAAC,EAAA3V,OAAAmV,eAAAxS,MAYA,GAXA,mBAAAgT,EAAAd,UACAc,EAAAd,WAEAlS,KAAA+S,WAAA,EACA/S,KAAA0S,yBAEA1S,KAAAsS,wBAAA,IAAAnF,IAKAnN,KAAAxB,eAAAwR,0BAAA,aAAAhQ,OAAA,CACA,MAAAiT,EAAAjT,KAAAkT,WAEAC,EAAA,IACA9V,OAAA+V,oBAAAH,MACA,mBAAA5V,OAAAgW,sBACAhW,OAAAgW,sBAAAJ,GACA,IAGA,UAAAxU,KAAA0U,EAIAnT,KAAAsT,eAAA7U,EAAAwU,EAAAxU,KAQAmB,iCAAA1C,EAAAuK,GACA,MAAAmJ,EAAAnJ,EAAAmJ,UACA,WAAAA,OACA9N,EACA,iBAAA8N,EACAA,EACA,iBAAA1T,IAAA0I,mBAAA9C,EAQAlD,wBAAAhC,EAAA8S,EAAAK,EAAAN,IACA,OAAAM,EAAAnT,EAAA8S,GAQA9Q,mCAAAhC,EAAA6J,GACA,MAAAvB,EAAAuB,EAAAvB,KACA2K,EAAApJ,EAAAoJ,WAAAV,EACAoD,EAAA,mBAAA1C,MAAA0C,cACA,OAAAA,IAAA3V,EAAAsI,GAAAtI,EAUAgC,iCAAAhC,EAAA6J,GACA,QAAA3E,IAAA2E,EAAAqJ,QACA,OAEA,MAAA5K,EAAAuB,EAAAvB,KACA2K,EAAApJ,EAAAoJ,UAGA,OAFAA,KAAA2C,aACArD,EAAAqD,aACA5V,EAAAsI,GAMAtG,aACAI,KAAAyT,0BAGAzT,KAAA6S,iBAcAjT,0BAGAI,KAAA0T,YACAvB,iBAAArE,QAAA,CAAA6F,EAAAlV,KACA,GAAAuB,KAAAxB,eAAAC,GAAA,CACA,MAAAb,EAAAoC,KAAAvB,UACAuB,KAAAvB,GACAuB,KAAA2R,sBACA3R,KAAA2R,oBAAA,IAAAxE,KAEAnN,KAAA2R,oBAAAjP,IAAAjE,EAAAb,MAOAgC,2BAIAI,KAAA2R,oBAAA7D,QAAA,CAAAnE,EAAAlL,IAAAuB,KAAAvB,GAAAkL,GACA3J,KAAA2R,yBAAA7O,EAEAlD,oBACAI,KAAA0R,aAAA1R,KAAA0R,aAAAH,GAKAvR,KAAA6R,wBACA7R,KAAA6R,wBACA7R,KAAA6R,2BAAA/O,GAQAlD,wBAKAA,yBAAA1C,EAAAwT,EAAA9S,GACA8S,IAAA9S,GACAoC,KAAA4T,qBAAA1W,EAAAU,GAGAgC,qBAAA1C,EAAAU,EAAA6J,EAAAkJ,IACA,MAAAkD,EAAA7T,KAAA0T,YACAtB,EAAAyB,EAAAxB,0BAAAnV,EAAAuK,GACA,QAAA3E,IAAAsP,EAAA,CACA,MAAA0B,EAAAD,EAAAE,0BAAAnW,EAAA6J,GAEA,QAAA3E,IAAAgR,EACA,OAUA9T,KAAA0R,aAAA1R,KAAA0R,aAAAL,GACA,MAAAyC,EACA9T,KAAA+F,gBAAAqM,GAGApS,KAAA4J,aAAAwI,EAAA0B,GAGA9T,KAAA0R,aAAA1R,KAAA0R,cAAAL,IAGAzR,qBAAA1C,EAAAU,GAGA,GAAAoC,KAAA0R,aAAAL,GACA,OAEA,MAAAwC,EAAA7T,KAAA0T,YACAM,EAAAH,EAAAvB,wBAAA9U,IAAAN,GACA,QAAA4F,IAAAkR,EAAA,CACA,MAAAvM,EAAAoM,EAAA1B,iBAAA3U,IAAAwW,IAAArD,GAEA3Q,KAAA0R,aAAA1R,KAAA0R,aAAAJ,GACAtR,KAAAgU,GAEAH,EAAAI,4BAAArW,EAAA6J,GAEAzH,KAAA0R,aAAA1R,KAAA0R,cAAAJ,IAQA1R,eAAA1C,EAAA0V,GACA,IAAAsB,GAAA,EAEA,QAAApR,IAAA5F,EAAA,CACA,MAAA2W,EAAA7T,KAAA0T,YACAjM,EAAAoM,EAAA1B,iBAAA3U,IAAAN,IAAAyT,GACAkD,EAAAM,iBAAAnU,KAAA9C,GAAA0V,EAAAnL,EAAAsJ,aACA/Q,KAAA8R,mBAAAlP,IAAA1F,IACA8C,KAAA8R,mBAAApP,IAAAxF,EAAA0V,IAMA,IAAAnL,EAAAqJ,SACA9Q,KAAA0R,aAAAJ,UACAxO,IAAA9C,KAAA+R,wBACA/R,KAAA+R,sBAAA,IAAA5E,KAEAnN,KAAA+R,sBAAArP,IAAAxF,EAAAuK,KAKAyM,GAAA,GAGAlU,KAAAoU,qBAAAF,GACAlU,KAAAqU,iBAgBAzU,cAAA1C,EAAA0V,GAEA,OADA5S,KAAA6S,eAAA3V,EAAA0V,GACA5S,KAAAsU,eAKA1U,uBAGA,IAAAsR,EACAqD,EAFAvU,KAAA0R,aAAA1R,KAAA0R,aAAAN,GAGA,MAAAoD,EAAAxU,KAAA4R,eACA5R,KAAA4R,eAAA,IAAAX,QAAA,CAAAwD,EAAAC,KACAxD,EAAAuD,EACAF,EAAAG,IAEA,UAGAF,EAEA,MAAAtI,IAKAlM,KAAA2U,qBACA,IAAA1D,QAAAwD,GAAAzU,KAAA6R,sBAAA4C,GAEA,IACA,MAAAtQ,EAAAnE,KAAA4U,gBAIA,MAAAzQ,SACAA,EAGA,MAAA+H,GACAqI,EAAArI,GAEAgF,GAAAlR,KAAAoU,qBAEAO,oBACA,OAAA3U,KAAA0R,aAAAH,GAEA6C,0BACA,OAAApU,KAAA0R,aAAAN,GAEAyD,iBACA,OAAA7U,KAAA0R,aAAAP,GAkBAvR,gBAEAI,KAAA2R,qBACA3R,KAAA8U,2BAEA,IAAAC,GAAA,EACA,MAAAC,EAAAhV,KAAA8R,mBACA,KACAiD,EAAA/U,KAAA+U,aAAAC,KAEAhV,KAAA8K,OAAAkK,GAGA,MAAA9I,GAIA,MADA6I,GAAA,EACA7I,EAEA,QAEAlM,KAAAiV,eAEAF,IACA/U,KAAA0R,aAAAP,KACAnR,KAAA0R,aAAA1R,KAAA0R,aAAAP,GACAnR,KAAAkV,aAAAF,IAEAhV,KAAAmV,QAAAH,IAGApV,eACAI,KAAA8R,mBAAA,IAAA3E,IACAnN,KAAA0R,aAAA1R,KAAA0R,cAAAN,GAeAkD,qBACA,OAAAtU,KAAA4R,eASAhS,aAAAkS,GACA,SAUAlS,OAAAkS,QACAhP,IAAA9C,KAAA+R,uBACA/R,KAAA+R,sBAAAqD,KAAA,IAGApV,KAAA+R,sBAAAjE,QAAA,CAAAnE,EAAA8I,IAAAzS,KAAAqV,qBAAA5C,EAAAzS,KAAAyS,GAAA9I,IACA3J,KAAA+R,2BAAAjP,GAYAlD,QAAAkS,IAWAlS,aAAAkS,KAMAN,GAAAuB,WAAA;;;;;;;;;;;;;;ACxkBA,MA0BOuC,GAAAnP,GAAAoP,GAAA,mBAAAA,EA1BP,EAAApP,EAAAqP,KACAzS,OAAAC,eAAAyS,OAAAtP,EAAAqP,GAOAA,GAmBAE,CAAAvP,EAAAoP,GAjBA,EAAApP,EAAAwP,KACA,MAAAC,KAAWA,EAAAC,YAAiBF,EAC5B,OACAC,OACAC,WAEAjW,SAAA4V,GACAzS,OAAAC,eAAAyS,OAAAtP,EAAAqP,MAWAM,CAAA3P,EAAAoP,GACAQ,GAAA,CAAAtO,EAAArD,IAIA,WAAAA,EAAAwR,OAAAxR,EAAAuR,YACA,UAAAvR,EAAAuR,WASA,CACAC,KAAA,QACA1X,IAAAR,SACAsY,UAAA,MACAL,WAAA,GAUA/V,cACA,mBAAAwE,EAAA6R,cACAjW,KAAAoE,EAAAlG,KAAAkG,EAAA6R,YAAAnZ,KAAAkD,QAGAJ,SAAA4V,GACAA,EAAAlC,eAAAlP,EAAAlG,IAAAuJ,KA5BApK,OAAA6Y,OAAA,GAA+B9R,EAAA,CAAYxE,SAAA4V,GAC3CA,EAAAlC,eAAAlP,EAAAlG,IAAAuJ,MAgCA0O,GAAA,CAAA1O,EAAA2O,EAAAlZ,KACAkZ,EAAA1C,YACAJ,eAAApW,EAAAuK,IASO,SAAAnJ,GAAAmJ,GAEP,OAAA4O,EAAAnZ,SAAA4F,IAAA5F,EACAiZ,GAAA1O,EAAA4O,EAAAnZ,GACA6Y,GAAAtO,EAAA4O,GA8CA,MCpIOC,GAAA,uBAAAC,SAAAhY,WACP,YAAAiY,cAAAjY,UACAkY,GAAA/Y,SACO,MAAAgZ,GACP9W,YAAA+W,EAAAC,GACA,GAAAA,IAAAH,GACA,UAAAlV,MAAA,qEAEAvB,KAAA2W,UAIAE,iBAYA,YAXA/T,IAAA9C,KAAA8W,cAGAR,IACAtW,KAAA8W,YAAA,IAAAN,cACAxW,KAAA8W,YAAAC,YAAA/W,KAAA2W,UAGA3W,KAAA8W,YAAA,MAGA9W,KAAA8W,YAEAlX,WACA,OAAAI,KAAA2W,SAUO,MAqBAK,GAAA,CAAAlS,KAAAC,KACP,MAAA4R,EAAA5R,EAAAkS,OAAA,CAAAC,EAAAvN,EAAAwN,IAAAD,EAnBA,CAAAtZ,IACA,GAAAA,aAAA8Y,GACA,OAAA9Y,EAAA+Y,QAEA,oBAAA/Y,EACA,OAAAA,EAGA,UAAA2D,yEAA2F3D,uGAW3FwZ,CAAAzN,GAAA7E,EAAAqS,EAAA,GAAArS,EAAA,IACA,WAAA4R,GAAAC,EAAAF;;;;;;;;;;;;;;CC9CA1T,OAAA,qBAAAA,OAAA,wBACArD,KAAA,SAmBA,MAAA2X,GAAArI,KAAAsI,KAAAtI,EAAAsI,KAAAC,KAbA,SAAAC,EAAAxI,EAAA7K,EAAA,IACA,QAAAxH,EAAA,EAAAqI,EAAAgK,EAAAhK,OAA2CrI,EAAAqI,EAAYrI,IAAA,CACvD,MAAAiB,EAAAoR,EAAArS,GACAwM,MAAAC,QAAAxL,GACA4Z,EAAA5Z,EAAAuG,GAGAA,EAAAzE,KAAA9B,GAGA,OAAAuG,EAGAqT,CAAAxI,GACO,MAAMyI,WAAmBjG,GAEhC5R,kBACA4L,MAAA0G,WAGAlS,KAAA0X,QACA1X,KAAAxB,eAAAwR,0BAAA,SAAAhQ,OACAA,KAAA2X,mBACA3X,KAAA0X,SAAA,GAGA9X,0BAOA,MAAAgY,EAAA5X,KAAAgP,OACAA,EAAA,GACA,GAAA7F,MAAAC,QAAAwO,GAAA,CACAP,GAAAO,GAMAC,YAAA,CAAAnV,EAAAhE,KACAgE,EAAAqM,IAAArQ,GAEAgE,GACa,IAAAkM,KAEbd,QAAAnE,GAAAqF,EAAA8I,QAAAnO,SAEAiO,GACA5I,EAAAtP,KAAAkY,GAEA,OAAA5I,EAOApP,aACA4L,MAAAwG,aACAhS,KAAA+X,WACA/X,KAAAgY,mBAIAjV,OAAAkV,YAAAjY,KAAA+X,sBAAAhV,OAAAkV,YACAjY,KAAAkY,cAUAtY,mBACA,OAAAI,KAAAmY,aAAA,CAAkCra,KAAA,SAWlC8B,cACA,MAAAoP,EAAAhP,KAAA0T,YAAAgE,QACA,IAAA1I,EAAAhK,cAQAlC,IAAAC,OAAAqL,UAAArL,OAAAqL,SAAA0B,aAGiBwG,GACjBtW,KAAA+X,WAAAK,mBACApJ,EAAAqJ,IAAA3Z,KAAAmY,YAKA7W,KAAAsY,8BAAA,EATAvV,OAAAqL,SAAAmK,YAAAC,sBAAAxJ,EAAAqJ,IAAA3Z,KAAAiY,SAAA3W,KAAAyY,YAYA7Y,oBACA4L,MAAAkN,oBAGA1Y,KAAA6U,iBAAA/R,IAAAC,OAAAqL,UACArL,OAAAqL,SAAAuK,aAAA3Y,MASAJ,OAAAoV,GACAxJ,MAAAV,OAAAkK,GACA,MAAA4D,EAAA5Y,KAAA6Y,SACAD,aAAsCrQ,GACtCvI,KAAA0T,YACAmF,OAAAD,EAAA5Y,KAAA+X,WAAA,CAA0D7J,UAAAlO,KAAAyY,UAAAzM,aAAAhM,OAK1DA,KAAAsY,+BACAtY,KAAAsY,8BAAA,EACAtY,KAAA0T,YAAAgE,QAAA5J,QAAApP,IACA,MAAAyQ,EAAAnQ,SAAA8J,cAAA,SACAqG,EAAAC,YAAA1Q,EAAAiY,QACA3W,KAAA+X,WAAA5N,YAAAgF,MASAvP,WAOA6X,GAAU1E,WAAA,EASV0E,GAAUoB,OJuBS,CAAA1U,EAAAhB,EAAAsE,KACnB,MAAAyG,EAAAzG,EAAAyG,UACA4K,EAAwBxL,EAAK1K,IAAAO,GAC7B4V,EAAA5K,GACA,KAAAhL,EAAAgC,YACAhC,EAAA6V,MAAA7U,aAA8CoE,EAE9C0Q,EAAAF,IAAApK,EAAA/L,IAAAsL,GAGAgL,EAAAD,EAAAja,SAAAma,yBAAAhW,EAWA,GH/MO,EAAAgB,EAAAhB,EAAAsE,KACP,IAAAL,EAAekG,EAAK9P,IAAA2F,QACpBL,IAAAsE,IACQlE,EAAWC,IAAAyM,YACXtC,EAAK5K,IAAAS,EAAAiE,EAAA,IAA2B4C,EAAQ3M,OAAA6Y,OAAA,CAAiBrL,mBAAiBpD,KAClFL,EAAAgS,WAAAjW,IAEAiE,EAAAO,SAAAxD,GACAiD,EAAAQ,UG6LIiR,CAAS1U,EAAA+U,EAAA7b,OAAA6Y,OAAA,CAAyCrL,gBAAA2D,EAAAN,IAAmDzG,IAUzGwR,EAAA,CACA,MAAA7R,EAAqBkG,EAAK9P,IAAA0b,GAClB5L,EAAK+L,OAAAH,GACb9R,EAAAxJ,iBAAkC0J,GAClCuH,EAAAqK,EAAA9R,EAAAxJ,MAAA2J,SAAA2G,GAEQhL,EAAWC,IAAAyM,YACnBzM,EAAAgH,YAAA+O,GACQ5L,EAAK5K,IAAAS,EAAAiE,IAQb0R,GAAAC,GACAhW,OAAAqL,SAAAuK,aAAAxV,EAAA6V;;;;;;;;;;;;;;AKjPA,MAAAM,GAAA,IAAAhX,QAWOiX,GAAiBhX,EAASiX,GAAApS,IACjC,KAAAA,aAA0BqC,IAAarC,aAAsBsE,GAC7D,UAAAtE,EAAA0C,UAAA5M,MAAAkK,EAAA0C,UAAAzF,MAAAW,OAAA,EACA,UAAAzD,MAAA,8GAGA,MAAAuI,UAAWA,GAAY1C,GACvBhD,QAAWA,GAAU0F,EAErBwP,GAAA1W,IAAAwE,KACAhD,EAAAqV,UAAA3P,EAAAhF,QAAAsI,KAAA,MAEA,MAAAsM,UAAWA,GAAYtV,EAEvBuV,EAAAL,GAAA9b,IAAA4J,GACA,UAAAlK,KAAAyc,EACAzc,KAAAsc,GACAE,EAAAE,OAAA1c,GAIA,UAAAA,KAAAsc,EAAA,CACA,MAAA5b,EAAA4b,EAAAtc,GACA,IAAAyc,GAAA/b,IAAA+b,EAAAzc,GAAA,CAIAwc,EADA9b,EAAA,gBACAV,IAGAoc,GAAA5W,IAAA0E,EAAAoS,KCzDe,MAAMK,GAInBja,YACkBC,EACAC,GADAE,KAAAH,OACAG,KAAAF,QALVE,KAAA8Z,YAAgC,KAChC9Z,KAAA+Z,WAA+B,KAOhCna,WACL,IAAKI,KAAK8Z,YAAa,CACrB,MAAM1Z,EAAO,IAAIW,KAAKf,KAAKH,KAAMG,KAAKF,MAAO,GAC7CE,KAAK8Z,YAAc,IAAIna,EAAUS,EAAKY,cAAeZ,EAAKa,WAAYb,EAAKG,WAE7E,OAAOP,KAAK8Z,YAGPla,UACL,IAAKI,KAAK+Z,WAAY,CACpB,MAAM3Z,EAAO,IAAIW,KAAKf,KAAKH,KAAMG,KAAKF,MAAO,GAC7CM,EAAK4Z,SAAS5Z,EAAKa,WAAa,GAChCb,EAAKE,QAAQ,GACbN,KAAK+Z,WAAa,IAAIpa,EAAUS,EAAKY,cAAeZ,EAAKa,WAAYb,EAAKG,WAE5E,OAAOP,KAAK+Z,WAGPna,SAASG,GACd,OAAOC,KAAKH,OAASE,EAAIF,MAAQG,KAAKF,QAAUC,EAAID,MAG/CF,IAAIqa,GACT,MAAM7Z,EAAO,IAAIW,KAAKf,KAAKH,KAAMG,KAAKF,MAAO,GAE7C,OADAM,EAAK4Z,SAAS5Z,EAAKa,WAAagZ,GACzB,IAAIJ,GAAYzZ,EAAKY,cAAeZ,EAAKa,YAG3CrB,oBACL,MAAMsa,EAAY,IAAIvZ,KAAKC,eAAe,QAAS,CACjDd,MAAO,OACPD,KAAM,YAEFO,EAAO,IAAIW,KAAKf,KAAKH,KAAMG,KAAKF,OACtC,OAAOoa,EAAUxZ,OAAON,GAGnBR,aACL,MAAMQ,EAAO,IAAIW,KACjB,OAAO,IAAI8Y,GAAYzZ,EAAKY,cAAeZ,EAAKa,aChDrC,MAAMkZ,GAInBva,YACEmC,EACAqB,GAEApD,KAAKoa,MAAQhX,EAAIiX,WACjBra,KAAKsa,QAAUvY,EAGjBnC,EAAElC,OAAO2L,YACP,MAAOrJ,KAAKsa,QAAQC,OAAOva,KAAKoa,cACxBpa,KAAKsa,QACXta,KAAKsa,QAAUta,KAAKsa,QAAQD,0cCVlC,MAAMG,GAAW,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAGtD,IAAqBC,GAAQC,GAA7B,cAAsCjD,GADtC7X,kCAWSI,KAAA2a,OAAuB,GAGvB3a,KAAA4a,SAAyB,KAGxB5a,KAAAF,MAAQ+Z,GAAYgB,MAf5Bjb,kBAKE,OAJKmD,OAAOC,eAAexF,IAAI,4BAC7BuF,OAAOC,eAAeyS,OAAO,0BAA2BiF,IAGnD3X,OAAOC,eAAe8X,YAAY,2BAYnClb,WAAWG,GACjB,MAAMgb,EAAQhb,EAAIc,SAAS,WACrBuD,EAAUpE,KAAK+X,WAAWlI,4BAA4BkL,OACvD3W,GACLA,EAAQ4W,eAAe,CACrBC,SAAU,SACVC,MAAO,QACPC,OAAQ,YAIJvb,mBACNI,KAAKF,MAAQE,KAAKF,MAAMiP,IAAI,GAGtBnP,uBACNI,KAAKF,MAAQE,KAAKF,MAAMiP,KAAK,GAGvBnP,YAAY+a,GAClB,MAAMtC,EAAMsC,EAAO1D,OAAO,CAACmE,EAAMC,KAC/B,MAAMnd,EAAMmd,EAAKjb,KAAKS,SAAS,WACzBya,EAAQF,EAAKxY,IAAI1E,GAAOkd,EAAK5d,IAAIU,GAAO,GAG9C,OAFAod,EAAM5b,KAAK2b,GACXD,EAAK1Y,IAAIxE,EAAKod,GACPF,GACN,IAAIjO,KACP,OAAOhE,MACJmG,KAAK+I,EAAIkD,WACTlD,IAAI,EAAE5F,EAAG9I,KAAOA,GAChB6R,KAAK,CAAC5e,EAAGa,IAAMb,EAAE,GAAGwD,KAAKqb,QAAQhe,EAAE,GAAG2C,OAGnCR,aAAagN,GACnB5M,KAAK4a,SAAWhO,EAChB5M,KAAK0b,cAAc,IAAIC,YAAY,WAG3B/b,SACR,MAAMgc,EAAY,IAAIhN,IAAI5O,KAAK2a,OAAOtC,IAAInM,GAAKA,EAAE9L,KAAKS,SAAS,aAKzDgb,EAAO1S,MAAMmG,KAAK,IAAI6K,GAC1Bna,KAAKF,MAAMgc,WAAWC,wBACtB/b,KAAKF,MAAMkc,UAAUC,wBAGvB,OAAO1O;;;;;;;yBAOc,IAAMvN,KAAKkc;;;qBAGflc,KAAKF,MAAMqc;;;yBAGP,IAAMnc,KAAKoc;;;;;gBAKpB5B,GAASnC,IAAIgE,GAAK9O,uCAA0C8O;gBAC5DR,EAAKxD,IAAIpb,IACT,MAAMqf,EAAWV,EAAUhZ,IAAI3F,EAAE4D,SAAS,YACpC0b,GAAcvc,KAAKF,MAAM0c,SAASvf,GAExC,OAAIqf,EACK/O;;2DAEkCgP,EAAa,eAAiB;+BAC1D,IAAMvc,KAAKyc,WAAWxf;qEACgBA,EAAE8C;;;oBAMhDwN;kDAC2BgP,EAAa,eAAiB;yDACvBtf,EAAE8C;;;;;YAM/CC,KAAK2a,OAAO3V,OACZuI;;kBAEMvN,KAAK0c,YAAY1c,KAAK2a,QAAQtC,IAAKsC,GAC5BpN;8DACqCoN,EAAO,GAAGva,KAAKS,SAAS;wDAC9B8Z,EAAO,GAAGva,KAAKS,SAAS;;0BAEtD8Z,EAAOtC,IAAInM,GACJqB;;sCAEKgM,GAAS,CAAEoD,gBAAgB,EAAM/B,SAAU5a,KAAK4a,WAAa1O;uCAC5D,IAAMlM,KAAK4c,aAAa1Q;gEACCA,EAAEvK;+DACHuK,EAAE/J,KAAKtB,SAAS;gEACfqL,EAAEpK;kEACAoK,EAAErK;;;;;;;cAUxD0L;;;QAOIkN,GAAAzL,OAASgI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IApIvB6F,GAAA,CADCve,GAAS,CAAEsS,WAAW,qBACRzH,sCAGf0T,GAAA,CADCve,GAAS,CAAEsS,WAAW,8DAIvBiM,GAAA,CADCve,GAAS,CAAEsS,WAAW,2DAfJ,IAAAkM,GAAArC,GAAQC,GAAAmC,GAAA,CAD5BvH,GAAc,4BACMmF;;;;;;;;;;;;;GCUrB,MAAAsC,GAAA,IAAAza,QAQO0a,GAAmBza,EAAS3E,GAAAwJ,IACnC,KAAAA,aAA0B4C,GAC1B,UAAAzI,MAAA,gDAEA,MAAA0b,EAAAF,GAAAvf,IAAA4J,GACA,QAAAtE,IAAAma,GAAuChU,EAAWrL,IAClDA,IAAAqf,EAAArf,OAAAwJ,EAAAxJ,QAAAqf,EAAApV,SACA,OAEA,MAAAN,EAAAvI,SAAA8J,cAAA,YACAvB,EAAAwB,UAAAnL,EACA,MAAAiK,EAAA7I,SAAA+I,WAAAR,EAAA7C,SAAA,GACA0C,EAAAO,SAAAE,GACAkV,GAAAra,IAAA0E,EAAA,CAA8BxJ,QAAAiK,0cC5B9B,IAAqBqV,GAArB,cAAkCzF,GADlC7X,kCAGSI,KAAAmd,KAAiB,QAMxBvd,SACE,OAAO2N,IAAOvN,KAAKmd,SAGdD,GAAAlO,OAASgI;;;;;IAVhBoG,GAAA,CADC9e,GAAS,CAAEsS,WAAW,0DADJ,IAAAyM,GAAAH,GAAIE,GAAA,CADxB9H,GAAc,wBACM4H,2bCVrB,MAAMI,GACJ1d,YACU2d,EACAC,GADAxd,KAAAud,MACAvd,KAAAwd,MAGV5d,EAAElC,OAAO2L,YACP,IAAK,IAAI1M,EAAIqD,KAAKud,IAAK5gB,GAAKqD,KAAKwd,IAAK7gB,UAC9BA,GAKZ,MAAM8gB,GAAWC,GAAqBA,GAAW/Z,KAAKga,GAAG,KAGnDC,GAAsB,CAACC,EAAaC,KAGxC,MAAO,CAAEC,GAFED,EAAM,KAAO,IAEZE,GADD,EAAIra,KAAKsa,IAAIta,KAAKua,IAAIT,GAAQI,IAH/B,CAACE,GAAsB,EAAIpa,KAAKwa,IAAIJ,GAGGK,CAAIX,GAAQI,KAASla,KAAKga,IAAM,IAG7EU,GAAc,CAACR,EAAYC,EAAaQ,KAC5C,MAAMlgB,EARS,CAACkgB,GAAyB,GAAKA,EAQpCC,CAASD,IACbP,EAAEA,EAACC,EAAEA,GAAMJ,GAAoBC,EAAKC,GAC1C,MAAO,CAAEC,EAAG3f,EAAE2f,EAAGC,EAAG5f,EAAE4f,IAQlBQ,GAAU,CAACT,EAAWC,EAAWS,2CACSA,KAAKV,KAAKC,QAEpD/f,GAASygB,MAAOb,EAAaC,EAAaQ,KAC9C,MAEMK,EAAO,IAAI,IAAIrB,IAAO3Z,KAAKib,MAAMC,GAAalb,KAAKmb,KAAKD,KACxDE,EAAO,IAAI,IAAIzB,IAAO3Z,KAAKib,MAAMI,GAAarb,KAAKmb,KAAKE,MACtDjB,EAAGkB,EAASjB,EAAGkB,GAdT,EAACrB,EAAaC,EAAaQ,KACzC,MAAMP,EAAEA,EAACC,EAAEA,GAAMK,GAAYR,EAAKC,EAAKQ,GACvC,MAAO,CAAEP,EAAGpa,KAAKwb,MAAMpB,GAAIC,EAAGra,KAAKwb,MAAMnB,KAYNoB,CAAQvB,EAAKC,EAAKQ,IAC7CP,EAAGsB,EAAWrB,EAAGsB,GAAcjB,GAAYR,EAAKC,EAAKQ,GACvDiB,EAAgB5b,KAAKwb,MAZX,KAYkBE,EAAYJ,IACxCO,EAAgB7b,KAAKwb,MAZV,KAYiBG,EAAYJ,IACxCO,EAAQ,GACd,IAAK,IAAIzB,KAAKe,EAAM,CAClB,MAAMW,EAAM,GACZ,IAAK,IAAI3B,KAAKY,EACZe,EAAIhgB,KAAK,CAAEqe,EAAGkB,EAAUlB,EAAGC,EAAGkB,EAAUlB,IAE1CyB,EAAM/f,KAAKggB,GAEb,MAEMC,EAAS3gB,SAAS8J,cAAc,UACtC6W,EAAOC,MAHYf,KAInBc,EAAOE,OAHab,KAIpB,MAAMc,EAAUH,EAAOI,WAAW,MAClCD,EAAQE,UAAY,OACpBF,EAAQG,SAAS,EAAG,EAPDpB,KACCG,MAOpB,MAAMkB,EAAgC,GACtC,IAAIC,EAAY,EAChB,IAAK,IAAIT,KAAOD,EAAO,CACrB,IAAIW,EAAY,EAChB,IAAK,IAAIC,KAAQX,EACfQ,EAASxgB,KAAK,OAAQ2gB,EAAMD,EAAWD,KACrC,MAAMxjB,EAAI,IAAI2jB,MACd3jB,EAAE4jB,IAAM/B,GAAQ6B,EAAKtC,EAAGsC,EAAKrC,EAAGM,SAC1B3hB,EAAE6jB,SACRV,EAAQW,UAAU9jB,EAvCR,IAuCWyjB,EAAwBb,EAtClC,IAsCiDY,EAAyBX,IAJzE,CAKXa,EAAMD,EAAWD,IACpBC,IAEFD,IAGF,aADMlP,QAAQyP,IAAIR,GACXP,GAIT,IAAqBgB,GAArB,cAAiClJ,GADjC7X,kCAKSI,KAAA4gB,SAAmB,EAGnB5gB,KAAA6gB,UAAoB,EAEnB7gB,KAAAmD,UAA4BnE,SAAS8J,cAAc,OAE3DlJ,0BACEI,KAAKmD,UAAUsW,UAAY,YAC3BjO,MAAMkN,oBACN,MAAMiH,QAAe1hB,GAAO+B,KAAK4gB,SAAU5gB,KAAK6gB,UAAW,IAErD1D,EAAOne,SAAS8J,cAAc,QACpCqU,EAAK/N,YAAc,QACnB+N,EAAK1D,UAAY,OAEjBzZ,KAAKmD,UAAUgH,YAAYwV,GAC3B3f,KAAKmD,UAAUgH,YAAYgT,GAG7Bvd,OAAOqT,GACLzH,MAAMV,OAAOmI,GAGfrT,SACE,OAAO2N,IAAOvN,KAAKmD,cA5BNwd,GAAAG,aAAe,CAAEzD,IA+BzBsD,GAAA3R,OAASgI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA5BhB+J,GAAA,CADCziB,GAAS,CAAEsS,WAAW,8DAIvBmQ,GAAA,CADCziB,GAAS,CAAEsS,WAAW,+DANJ,IAAAoQ,GAAAL,GAAGI,GAAA,CADvBzL,GAAc,uBACMqL,2bC5ErB,IAAqBM,GAArB,cAAqCxJ,GADrC7X,kCAKSI,KAAA4a,SAAyB,KAGzB5a,KAAAkhB,QAAU,GAEPthB,SACR,OAAyB,OAAlBI,KAAK4a,SACVrN;;;;;sDAKgD4T,mBAAmBnhB,KAAK4a,SAAS/Y;;0BAE7D7B,KAAK4a,SAAS3Y,WAAW2e;2BACxB5gB,KAAK4a,SAAS3Y,WAAW4e;;;8BAGtB7gB,KAAK4a,SAASjZ;;;2CAGD;;;;kBAIzB3B,KAAK4a,SAASxa,KAAKS,SAAS;;;kBAG5Bb,KAAK4a,SAASzY,KAAKtB,SAAS;;;;2CAIH;;;;kBAIzBb,KAAK4a,SAAS9Y;;;kBAGd9B,KAAK4a,SAAS/Y;;;;2CAIW;;;gBAG3Bmb,GAAWhd,KAAK4a,SAASlZ;;;;sCAIH1B,KAAK4a,SAAShZ;2CACT;;;;;QAMrC2L;;oBAEcvN,KAAKkhB;;UA9DRD,GAAAH,aAAe,CAAEE,GAAK3D,IAmE9B4D,GAAAjS,OAASgI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAhEhBoK,GAAA,CADC9iB,GAAS,CAAEsS,WAAW,8DAIvBwQ,GAAA,CADC9iB,GAAS,CAAEsS,WAAW,6DANJ,IAAAyQ,GAAAJ,GAAOG,GAAA,CAD3B9L,GAAc,2BACM2L,2bCDrB,IAAqBK,GAArB,cAAoC7J,GADpC7X,kCAKSI,KAAA2a,OAAuB,GAGvB3a,KAAA4a,SAAyB,KAGzB5a,KAAAkhB,QAAkB,GAgBjBlhB,KAAAuhB,SAAY3U,IAClB5M,KAAK4a,SAAYhO,EAAM4U,OAAoB5G,UAftChb,aAAaqT,GAClBzH,MAAMV,OAAOmI,GACTA,EAAMrQ,IAAI,WACR5C,KAAK2a,OAAO3V,QAA4B,OAAlBhF,KAAK4a,iBACvB5a,KAAKsU,eACXtU,KAAK4a,SAAW5a,KAAKyhB,eAAe,IAKlC7hB,eACN,OAAOI,KAAK2a,OAAOa,KAAK,CAACkG,EAAGC,IAAMD,EAAEthB,KAAKqb,QAAQkG,EAAEvhB,OAO9CR,SACL,OAAO2N;;kBAEOvN,KAAK2a;oBACH3a,KAAK4a;kBACP5a,KAAKuhB;;;oBAGHvhB,KAAK4a;mBACN5a,KAAKkhB;;QAtCPI,GAAAR,aAAe,CAAEhE,GAAUuE,IA2CnCC,GAAAtS,OAASgI;;;;;;;;;IAxChB4K,GAAA,CADCtjB,GAAS,CAAEsS,WAAW,qBACRzH,sCAGfyY,GAAA,CADCtjB,GAAS,CAAEsS,WAAW,8DAIvBgR,GAAA,CADCtjB,GAAS,CAAEsS,WAAW,6DATJ,IAAAiR,GAAAP,GAAMM,GAAA,CAD1BtM,GAAc,mBACMgM,ICFrBQ,IAAM,KACJ,MAAM1d,EAAUpF,SAAS6Q,cAAc,kBACnCzL,aAAmByd,KACrBzd,EAAQuW,OAAS5X,OAAOgf,MAAMpH,OAAOtC,IAAKnM,GAAW,IAAIzK,EAAMyK,IAC/D9H,EAAQ8c,QAAUne,OAAOgf,MAAMb","file":"home.2a3f9786a2db1e61cdbc.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/sunrise-hub-website/build/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n","/*!\n  * domready (c) Dustin Diaz 2014 - License MIT\n  */\n!function (name, definition) {\n\n  if (typeof module != 'undefined') module.exports = definition()\n  else if (typeof define == 'function' && typeof define.amd == 'object') define(definition)\n  else this[name] = definition()\n\n}('domready', function () {\n\n  var fns = [], listener\n    , doc = document\n    , hack = doc.documentElement.doScroll\n    , domContentLoaded = 'DOMContentLoaded'\n    , loaded = (hack ? /^loaded|^c/ : /^loaded|^i|^c/).test(doc.readyState)\n\n\n  if (!loaded)\n  doc.addEventListener(domContentLoaded, listener = function () {\n    doc.removeEventListener(domContentLoaded, listener)\n    loaded = 1\n    while (listener = fns.shift()) listener()\n  })\n\n  return function (fn) {\n    loaded ? setTimeout(fn, 0) : fns.push(fn)\n  }\n\n});\n","export type Format =\n  | 'iso8601'\n  | 'full'\n\nexport default class DayOfYear {\n  private cachedNearestPreviousSunday: DayOfYear | null = null\n  private cachedNearestNextSaturday: DayOfYear | null = null\n\n  constructor(\n    public readonly year: number,\n    public readonly month: number,\n    public readonly day: number\n  ) {}\n\n  public equals(other: DayOfYear): boolean {\n    return this.year === other.year\n      && this.month === other.month\n      && this.day === other.day\n  }\n\n  public compare(other: DayOfYear): number {\n    if (this.year < other.year) return -1\n    else if (this.year > other.year) return 1\n    else {\n      if (this.month < other.month) return -1\n      else if (this.month > other.month) return 1\n      else {\n        if (this.day < other.day) return -1\n        else if (this.day > other.day) return 1\n        else return 0\n      }\n    }\n  }\n\n  public nearestPreviousSunday(): DayOfYear {\n    if (!this.cachedNearestPreviousSunday) {\n      const date = this.toDate()\n      date.setDate(date.getDate() - date.getDay())\n      this.cachedNearestPreviousSunday = this.fromDate(date)\n    }\n    return this.cachedNearestPreviousSunday\n  }\n\n  public nearestNextSaturday(): DayOfYear {\n    if (!this.cachedNearestNextSaturday) {\n      const date = this.toDate()\n      date.setDate(date.getDate() + (6 - date.getDay()))\n      this.cachedNearestNextSaturday = this.fromDate(date)\n    }\n    return this.cachedNearestNextSaturday\n  }\n\n  public tomorrow(): DayOfYear {\n    const date = this.toDate()\n    date.setDate(date.getDate() + 1)\n    return this.fromDate(date)\n  }\n\n  public toString(format?: Format) {\n    switch (format) {\n      case 'full':\n        const date = this.toDate()\n        const formatter = new Intl.DateTimeFormat('en-US', {\n          day: 'numeric',\n          month: 'long',\n          year: 'numeric',\n        })\n        return formatter.format(date)\n      case 'iso8601':\n        return `${this.year}-${(this.month + 1).toString().padStart(2, '0')}-${this.day.toString().padStart(2, '0')}`\n      default:\n        return `<DayOfYear year=${this.year} month=${this.month}, day=${this.day}>`\n    }\n  }\n\n  private toDate(): Date {\n    return new Date(this.year, this.month, this.day)\n  }\n\n  private fromDate(date: Date): DayOfYear {\n    return new DayOfYear(date.getFullYear(), date.getMonth(), date.getDate())\n  }\n}","export type Format =\n  | 'iso8601'\n  | 'full'\n\nexport default class TimeOfDay {\n  constructor(\n    private millis: number\n  ) {}\n\n  /**\n   * @public\n   * @param {Format|undefined} format\n   * @returns string\n   */\n  public toString(format?: Format): string {\n    switch(format) {\n      case 'full': {\n        const date = new Date(this.millis)\n        const formatter = new Intl.DateTimeFormat('en-US', {\n          hour12: true,\n          hour: 'numeric',\n          minute: '2-digit',\n        })\n        return formatter.format(date)\n      }\n      case 'iso8601': {\n        throw new Error('not implemented')\n      }\n      default:\n        return `<TimeOfDay millis=${this.millis}>`\n    }\n  }\n}","import DayOfYear from './DayOfYear'\nimport TimeOfDay from './TimeOfDay'\n\nconst MILLIS_IN_A_DAY = 1000 * 60 * 60 * 24\n\nexport type Options = {\n  url: string,\n  title: string,\n  start: string,\n  description: string,\n  place: string,\n  address: string,\n  coordinates: {\n    latitude: number,\n    longitude: number,\n  },\n}\n\nexport default class Event {\n  public readonly title: string\n  public readonly date: DayOfYear\n  public readonly time: TimeOfDay\n  public readonly place: string\n  public readonly address: string\n  public readonly url: string\n  public readonly coordinate: { latitude: number, longitude: number }\n  public readonly description: string\n\n  constructor({\n    description,\n    title,\n    url,\n    address,\n    place,\n    start,\n    coordinates,\n  }: Options) {    \n    this.title = title\n    this.place = place\n    this.address = address\n    this.coordinate = coordinates\n    this.url = url\n    this.description = description\n    \n    const startDate = new Date(start)\n    this.time = new TimeOfDay(startDate.valueOf() % MILLIS_IN_A_DAY)\n    this.date = new DayOfYear(\n      startDate.getFullYear(),\n      startDate.getMonth(),\n      startDate.getDate()\n    )\n  }\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = window.customElements !== undefined &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = /([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari dooes not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment poisition.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceeding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceeding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? marker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // tslint:disable-next-line:no-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attibute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = value;\n        }\n        else {\n            this.__commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // tslint:disable-next-line:no-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the thrid\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\ntry {\n    const options = {\n        get capture() {\n            eventOptionsSupported = true;\n            return false;\n        }\n    };\n    // tslint:disable-next-line:no-any\n    window.addEventListener('test', options, options);\n    // tslint:disable-next-line:no-any\n    window.removeEventListener('test', options, options);\n}\ncatch (_e) {\n}\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (renderedDOM, template, scopeName) => {\n    shadyRenderSet.add(scopeName);\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = template.element.content;\n    insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host && result instanceof TemplateResult;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        if (part.value instanceof TemplateInstance) {\n            prepareTemplateStyles(renderContainer, part.value.template, scopeName);\n        }\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) &&\n            this.finalized) {\n            return;\n        }\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (typeof superCtor.finalize === 'function') {\n            superCtor.finalize();\n        }\n        this.finalized = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update. This getter can be implemented to\n     * await additional state. For example, it is sometimes useful to await a\n     * rendered element before fulfilling this Promise. To do this, first await\n     * `super.updateComplete` then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement.finalized = true;\n//# sourceMappingURL=updating-element.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * @param tagName the name of the custom element to define\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign({}, element, { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A `PropertyDeclaration` may optionally be\n * supplied to configure property features.\n *\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function query(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @ExportDecoratedItems\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign({}, element, { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifis event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n *\n *     class MyElement {\n *\n *       clicked = false;\n *\n *       render() {\n *         return html`<div @click=${this._onClick}`><button></button></div>`;\n *       }\n *\n *       @eventOptions({capture: true})\n *       _onClick(e) {\n *         this.clicked = true;\n *       }\n *     }\n */\nexport const eventOptions = (options) => \n// Return value typed as any to prevent TypeScript from complaining that\n// standard decorator function signature does not match TypeScript decorator\n// signature\n// TODO(kschaaf): unclear why it was only failing on this decorator and not\n// the others\n((protoOrDescriptor, name) => (name !== undefined) ?\n    legacyEventOptions(options, protoOrDescriptor, name) :\n    standardEventOptions(options, protoOrDescriptor));\n//# sourceMappingURL=decorators.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.0');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        super.finalize();\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n */\nLitElement.finalized = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","import DayOfYear from './DayOfYear'\n\nexport default class MonthOfYear {\n  private cachedFirst: DayOfYear | null = null\n  private cachedLast: DayOfYear | null = null\n\n  constructor(\n    public readonly year: number,\n    public readonly month: number\n  ) {}\n\n  public firstDay(): DayOfYear {\n    if (!this.cachedFirst) {\n      const date = new Date(this.year, this.month, 1)\n      this.cachedFirst = new DayOfYear(date.getFullYear(), date.getMonth(), date.getDate())\n    }\n    return this.cachedFirst\n  }\n\n  public lastDay(): DayOfYear {\n    if (!this.cachedLast) {\n      const date = new Date(this.year, this.month, 1)\n      date.setMonth(date.getMonth() + 1)\n      date.setDate(0)\n      this.cachedLast = new DayOfYear(date.getFullYear(), date.getMonth(), date.getDate())\n    }\n    return this.cachedLast\n  }\n\n  public contains(day: DayOfYear): boolean {\n    return this.year === day.year && this.month === day.month\n  }\n\n  public add(amount: number): MonthOfYear {\n    const date = new Date(this.year, this.month, 1)\n    date.setMonth(date.getMonth() + amount)\n    return new MonthOfYear(date.getFullYear(), date.getMonth())\n  }\n  \n  public formatForSwitcher(): string {\n    const formatter = new Intl.DateTimeFormat('en-US', {\n      month: 'long',\n      year: 'numeric'\n    })\n    const date = new Date(this.year, this.month)\n    return formatter.format(date)\n  }\n\n  public static now(): MonthOfYear {\n    const date = new Date()\n    return new MonthOfYear(date.getFullYear(), date.getMonth())\n  }\n}","import DayOfYear from './DayOfYear.js'\n\nexport default class DayRange implements Iterable<DayOfYear> {\n  private final: DayOfYear\n  private current: DayOfYear\n\n  constructor(\n    start: DayOfYear,\n    end: DayOfYear\n  ) {\n    this.final = end.tomorrow()\n    this.current = start\n  }\n\n  *[Symbol.iterator]() {\n    while(!this.current.equals(this.final)) {\n      yield this.current\n      this.current = this.current.tomorrow()\n    }\n  }\n}","import { LitElement, html, css, TemplateResult, CSSResult, property, customElement } from 'lit-element'\nimport { classMap } from 'lit-html/directives/class-map'\nimport DayOfYear from './DayOfYear'\nimport MonthOfYear from './MonthOfYear'\nimport DayRange from './DayRange'\nimport Event from './Event'\n\nconst weekdays = ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']\n\n@customElement('sunrise-events-calendar')\nexport default class Calendar extends LitElement {\n  static register() {\n    if (!window.customElements.get('sunrise-events-calendar')) {\n      window.customElements.define('sunrise-events-calendar', Calendar)\n    }\n\n    return window.customElements.whenDefined('sunrise-events-calendar')\n  }\n\n  @property({ attribute: false })\n  public events: Array<Event> = []\n\n  @property({ attribute: false })\n  public selected: Event | null = null\n\n  @property({ attribute: false })\n  private month = MonthOfYear.now()\n\n  private onDayClick(day: DayOfYear) {\n    const label = day.toString('iso8601')\n    const element = this.renderRoot.querySelector(`[data-day=\"${label}\"]`)\n    if (!element) return\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: 'start',\n      inline: 'nearest',\n    })\n  }\n\n  private onNextMonthClick() {\n    this.month = this.month.add(1)\n  }\n\n  private onPreviousMonthClick() {\n    this.month = this.month.add(-1)\n  }\n\n  private eventsByDay(events: Array<Event>): Array<Array<Event>> {\n    const map = events.reduce((memo, next) => {\n      const key = next.date.toString('iso8601')\n      const array = memo.has(key) ? memo.get(key) : []\n      array.push(next)\n      memo.set(key, array)\n      return memo\n    }, new Map())\n    return Array\n      .from(map.entries())\n      .map(([k, v]) => v)\n      .sort((l, r) => l[0].date.compare(r[0].date))\n  }\n\n  private onEventClick(event: Event) {\n    this.selected = event\n    this.dispatchEvent(new CustomEvent('select'))\n  }\n\n  protected render() {\n    const eventDays = new Set(this.events.map(e => e.date.toString('iso8601')))\n\n    /**\n     * @type Array<DayOfYear>\n     */\n    const days = Array.from(new DayRange(\n      this.month.firstDay().nearestPreviousSunday(),\n      this.month.lastDay().nearestNextSaturday()\n    ))\n\n    return html`\n      <div class=\"outer-card\">\n        <div class=\"inner-card\">\n          <div class=\"calendar\">\n            <div class=\"calendar-switcher\">\n              <button\n                class=\"calendar-switcher-button\"\n                @click=${() => this.onPreviousMonthClick()}>\n                <span class=\"icon\">chevron_left</span>\n              </button>\n              <div>${this.month.formatForSwitcher()}</div>\n              <button\n                class=\"calendar-switcher-button\"\n                @click=${() => this.onNextMonthClick()}>\n                <span class=\"icon\">chevron_right</span>\n              </button>\n            </div>\n            <div class=\"calendar-grid\">\n              ${weekdays.map(w => html`<div class=\"calendar-grid-weekday\">${w}</div>`)}\n              ${days.map(d => {\n                const hasEvent = eventDays.has(d.toString('iso8601'))\n                const outOfMonth = !this.month.contains(d)\n\n                if (hasEvent) {\n                  return html`\n                    <button\n                      class=\"calendar-grid-day has-event ${outOfMonth ? 'out-of-month' : ''}\"\n                      @click=${() => this.onDayClick(d)}>\n                      <span class=\"calendar-grid-number has-event\">${d.day}</span>\n                      <span class=\"calendar-grid-event-marker\"></span>\n                    </button>\n                  `\n                }\n\n                return html`\n                  <div class=\"calendar-grid-day ${outOfMonth ? 'out-of-month' : ''}\">\n                    <span class=\"calendar-grid-number\">${d.day}</span>\n                  </div>\n                `\n              })}\n            </div>\n          </div>\n          ${this.events.length ?\n            html`\n              <div class=\"events\" data-events-scroll>\n                ${this.eventsByDay(this.events).map((events) => {\n                  return html`\n                    <div class=\"events-day-group\" data-day=\"${events[0].date.toString('iso8601')}\">\n                      <div class=\"events-day-heading\">${events[0].date.toString('full')}</div>\n                      <div class=\"events-inner-list\">\n                        ${events.map(e => {\n                          return html`\n                            <div\n                              class=${classMap({ 'events-event': true, selected: this.selected === e })}\n                              @click=${() => this.onEventClick(e)}>\n                              <div class=\"events-event-title\">${e.title}</div>\n                              <div class=\"events-event-time\">${e.time.toString('full')}</div>\n                              <div class=\"events-event-place\">${e.place}</div>\n                              <div class=\"events-event-address\">${e.address}</div>\n                            </div>\n                          `\n                        })}\n                      </div>\n                    </div>\n                  `\n                })}\n              </div>\n            ` :\n            html``\n          }\n        </div>\n      </div>\n    `\n  }\n\n  public static styles = css`\n    :host {\n      display: block;\n      min-height: 0;\n      position: relative;\n    }\n    * {\n      box-shadow: border-box;\n    }\n    .outer-card {\n      background-color: var(--color-charcoal);\n      border-radius: var(--shape-border-radius);\n      box-shadow: var(--elevation-box-shadow-01dp);\n      position: relative;\n      height: 100%;\n      position: relative;\n      overflow: hidden;\n    }\n    .outer-card::after {\n      position: absolute;\n      z-index: 0;\n      content: '';\n      left: 0; right: 0; top: 0; bottom: 0;\n      background-color: #fff;\n      opacity: var(--elevation-overlay-opacity-01dp);\n      border-radius: var(--shape-border-radius);\n    }\n\n    .inner-card {\n      position: relative;\n      z-index: 1;\n      display: grid;\n      grid-template-rows: auto minmax(0, 1fr);\n      grid-auto-flow: row;\n      height: 100%;\n    }\n\n    .calendar {\n      background-color: var(--elevation-overlay-color-04dp);\n      box-shadow: var(--elevation-box-shadow-03dp);\n      z-index: 1;\n      position: relative;\n    }\n\n    .calendar-switcher {\n      display: grid;\n      grid-template-columns: auto 1fr auto;\n      grid-auto-flow: column;\n      place-items: center;\n      padding: 8px;\n    }\n\n    .calendar-switcher-button {\n      background: 0;\n      border: 0;\n      outline: 0;\n      padding: 4px;\n      color: var(--color-willow);\n      position: relative;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      width: 40px;\n      height: 40px;\n      cursor: pointer;\n      font-size: 32px;\n    }\n      .calendar-switcher-button::before {\n        position: absolute;\n        content: '';\n        background-color: var(--color-willow);\n        opacity: 0;\n        border-radius: 50%;\n        left: 0; right: 0; top: 0; bottom: 0;\n        pointer-events: none;\n      }\n      .calendar-switcher-button:hover::before {\n        opacity: 0.04;\n      }\n      .calendar-switcher-button:active::before {\n        opacity: 0.08;\n      }\n\n    .calendar-grid {\n      display: grid;\n      grid-template-columns: repeat(7, auto);\n      grid-auto-flow: dense;\n      place-items: center;\n      padding: 8px;\n    }\n\n    .calendar-grid-weekday {\n      padding: 8px 0;\n    }\n\n    .calendar-grid-day {\n      line-height: 1;\n      font-size: 20px;\n      width: 48px;\n      height: 48px;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      flex-direction: column;\n      border: 0;\n      background: 0;\n      outline: 0;\n      color: inherit;\n      font-family: inherit;\n      border-radius: 50%;\n    }\n      .calendar-grid-day.out-of-month {\n        opacity: 0.6;\n      }\n      .calendar-grid-day.has-event {\n        cursor: pointer;\n      }\n      .calendar-grid-day.has-event:hover {\n        opacity: 1;\n        background-color: var(--state-overlay-color-hover);\n      }\n\n    .calendar-grid-number {\n      margin-bottom: 10px;\n    }\n\n    .calendar-grid-number.has-event {\n      margin-bottom: 4px;\n    }\n\n    .calendar-grid-event-marker {\n      width: 6px;\n      height: 6px;\n      display: block;\n      border-radius: 50%;\n      background-color: var(--color-yellow);\n    }\n\n    .icon {\n      font-family: Material Icons;\n      font-weight: normal;\n      font-style: normal;\n      line-height: 1;\n      letter-spacing: normal;\n      text-transform: none;\n      display: inline-block;\n      white-space: nowrap;\n      word-wrap: normal;\n      direction: ltr;\n      -webkit-font-feature-settings: 'liga';\n      font-feature-settings: 'liga';\n      -webkit-font-smoothing: antialiased;\n    }\n\n    .events {\n      overflow-y: auto;\n      overflow-x: hidden;\n      border-bottom-left-radius: var(--shape-border-radius);\n      border-bottom-right-radius: var(--shape-border-radius);\n      min-height: 0;\n      position: relative;\n      padding-bottom: 24px;\n    }\n\n    .events-day-group {\n      position: relative;\n    }\n    .events-day-heading {\n      position: -webkit-sticky;\n      position: sticky;\n      top: 0;\n      background-color: var(--color-charcoal);\n      padding: 16px;\n      text-transform: uppercase;\n      font-weight: 900;\n    }\n      .events-day-heading::before {\n        position: absolute;\n        top: 0; left: 0; right: 0; bottom: 0;\n        content: '';\n        background-color: var(--elevation-overlay-color-01dp);\n      }\n    .events-inner-list {\n      padding: 0 16px;\n    }\n    .events-event {\n      padding: 16px;\n      box-shadow: var(--elevation-box-shadow-01dp);\n      border-radius: var(--shape-border-radius);\n      background-color: var(--elevation-overlay-color-02dp);\n      margin-bottom: 16px;\n      cursor: pointer;\n    }\n      .events-event:last-child {\n        margin-bottom: 0;\n      }\n      .events-event.selected {\n        background-color: var(--state-overlay-color-selected);\n        border: 2px solid var(--state-border-color-selected);\n        padding: 14px;\n      }\n    .events-event-title {\n      font-size: 20px;\n      font-weight: 700;\n    }\n    .events-event-time {\n      margin-bottom: 8px;\n    }\n    .events-event-place {\n      padding-left: 4px;\n      font-size: 18px;\n    }\n    .events-event-address {\n      padding-left: 4px;\n    }\n  `\n}","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isPrimitive } from '../lib/parts.js';\nimport { directive, NodePart } from '../lit-html.js';\n// For each part, remember the value that was last rendered to the part by the\n// unsafeHTML directive, and the DocumentFragment that was last set as a value.\n// The DocumentFragment is used as a unique key to check if the last value\n// rendered to the part was with unsafeHTML. If not, we'll always re-render the\n// value passed to unsafeHTML.\nconst previousValues = new WeakMap();\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive((value) => (part) => {\n    if (!(part instanceof NodePart)) {\n        throw new Error('unsafeHTML can only be used in text bindings');\n    }\n    const previousValue = previousValues.get(part);\n    if (previousValue !== undefined && isPrimitive(value) &&\n        value === previousValue.value && part.value === previousValue.fragment) {\n        return;\n    }\n    const template = document.createElement('template');\n    template.innerHTML = value; // innerHTML casts to string internally\n    const fragment = document.importNode(template.content, true);\n    part.setValue(fragment);\n    previousValues.set(part, { value, fragment });\n});\n//# sourceMappingURL=unsafe-html.js.map","import { LitElement, html, css, customElement, property } from 'lit-element'\n\nexport type IconName =\n  | 'place'\n  | 'event'\n  | 'info'\n  | 'arrow_right'\n  | 'arrow_left'\n  | 'chevron_right'\n  | 'chevron_left'\n  | 'launch'\n\n@customElement('sunrise-events-icon')\nexport default class Icon extends LitElement {\n  @property({ attribute: false })\n  public icon: IconName = 'place'\n\n  /**\n   * @public\n   * @returns TemplateResult\n   */\n  render() {\n    return html`${this.icon}`\n  }\n\n  static styles = css`\n    :host {\n      display: inline-block;\n      font-family: Material Icons;\n    }\n  `\n}","import { LitElement, html, css, property, customElement } from 'lit-element'\nimport Icon from './Icon'\n\nclass Range implements Iterable<number> {\n  constructor(\n    private min: number,\n    private max: number,\n  ) {}\n\n  *[Symbol.iterator]() {\n    for (var i = this.min; i <= this.max; i++) {\n      yield i\n    }\n  }\n}\ntype Position = { x: number, y: number }\nconst radians = (degrees: number) =>  degrees * (Math.PI/180)\nconst numTiles = (zoom: number): number => 2 ** zoom\nconst sec = (x: number): number => 1 / Math.cos(x)\nconst latLonToRelativePos = (lat: number, lon: number): Position => {\n  const x = (lon + 180) / 360\n  const y = (1 - Math.log(Math.tan(radians(lat)) + sec(radians(lat))) / Math.PI) / 2\n  return { x, y }\n}\nconst latLonToPos = (lat: number,lon: number, zoom: number): Position =>  {\n  const n = numTiles(zoom)\n  const { x, y } = latLonToRelativePos(lat, lon)\n  return { x: n*x, y: n*y }\n}\nconst tilePos = (lat: number, lon: number, zoom: number): Position => {\n  const { x, y } = latLonToPos(lat, lon, zoom)\n  return { x: Math.trunc(x), y: Math.trunc(y) }\n}\nconst tileWidth = 256\nconst tileHeight = 256\nconst tileUrl = (x: number, y: number, z: number): string => {\n  return `https://maps.wikimedia.org/osm-intl/${z}/${x}/${y}.png`\n}\nconst create = async (lat: number, lon: number, zoom: number) => {\n  const tilesX = 4\n  const tilesY = 4\n  const xRow = [...new Range(-Math.floor(tilesX / 2), Math.ceil(tilesX / 2))]\n  const yRow = [...new Range(-Math.floor(tilesY / 2), Math.ceil(tilesY / 2))]\n  const { x: xOffset, y: yOffset } = tilePos(lat, lon, zoom)\n  const { x: xAbsolute, y: yAbsolute } = latLonToPos(lat, lon, zoom)\n  const latCenterDiff = Math.trunc((xAbsolute - xOffset) * tileWidth)\n  const lonCenterDiff = Math.trunc((yAbsolute - yOffset) * tileHeight)\n  const tiles = []\n  for (var y of yRow) {\n    const row = []\n    for (var x of xRow) {\n      row.push({ x: xOffset + x, y: yOffset + y })\n    }\n    tiles.push(row)\n  }\n  const imageWidth = tilesX * tileWidth\n  const imageHeight = tilesY * tileHeight\n  const canvas = document.createElement('canvas')\n  canvas.width = imageWidth\n  canvas.height = imageHeight\n  const context = canvas.getContext('2d') as CanvasRenderingContext2D\n  context.fillStyle = '#fff'\n  context.fillRect(0, 0, imageWidth, imageHeight)\n  const promises: Array<Promise<any>> = []\n  let rowOffset = 0\n  for (let row of tiles) {\n    let colOffset = 0\n    for (let tile of row) {\n      promises.push((async (tile, colOffset, rowOffset) => {\n        const i = new Image()\n        i.src = tileUrl(tile.x, tile.y, zoom)\n        await i.decode()\n        context.drawImage(i, colOffset * tileWidth - latCenterDiff, rowOffset * tileHeight - lonCenterDiff)\n      })(tile, colOffset, rowOffset))\n      colOffset++\n    }\n    rowOffset++\n  }\n  await Promise.all(promises)\n  return canvas\n}\n\n@customElement('sunrise-events-map')\nexport default class Map extends LitElement {\n  private static dependencies = [ Icon ]\n\n  @property({ attribute: false })\n  public latitude: number = 0\n\n  @property({ attribute: false })\n  public longitude: number = 0\n\n  private container: HTMLDivElement = document.createElement('div')\n\n  async connectedCallback() {\n    this.container.className = 'container'\n    super.connectedCallback()\n    const canvas = await create(this.latitude, this.longitude, 17)\n\n    const icon = document.createElement('span')\n    icon.textContent = 'place'\n    icon.className = 'icon'\n\n    this.container.appendChild(canvas)\n    this.container.appendChild(icon)\n  }\n\n  update(props: any) {\n    super.update(props)\n  }\n\n  render() {\n    return html`${this.container}`\n  }\n\n  static styles = css`\n    :host {\n      display: block;\n      height: 100%;\n      width: 100%;\n      min-width: 0;\n      min-height: 0;\n      position: relative;\n    }\n\n    .container {\n      width: 100%;\n      height: 100%;\n      pointer-events: none !important;\n      position: relative;\n      overflow: hidden;\n    }\n\n    canvas {\n      position: absolute;\n      left: 50%;\n      top: 50%;\n      transform: translateX(-50%) translateY(-50%);\n    }\n\n    .icon {\n      width: 32px;\n      height: 32px;\n      font-family: Material Icons;\n      color: var(--color-yellow);\n      font-size: 32px;\n      line-height: 1;\n      text-shadow: 0 1px 6px rgba(0,0,0,0.4);\n      pointer-events: none !important;\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translateX(-50%) translateY(-50%) translateY(-16px);\n    }\n  `\n}","import { LitElement, html, css, property, customElement } from 'lit-element'\nimport { unsafeHTML } from 'lit-html/directives/unsafe-html'\nimport Event from './Event'\nimport Map from './Map'\nimport Icon from './Icon'\n\n@customElement('sunrise-events-details')\nexport default class Details extends LitElement {\n  private static dependencies = [ Map, Icon ]\n\n  @property({ attribute: false })\n  public selected: Event | null = null\n\n  @property({ attribute: false })\n  public hubName = ''\n\n  protected render() {\n    return this.selected !== null ?\n      html`\n        <div class=\"selected-container\">\n          <a\n            class=\"map-link\"\n            target=\"_blank\"\n            href=\"https://www.google.com/maps/place/${encodeURIComponent(this.selected.address)}\">\n            <sunrise-events-map\n              .latitude=${this.selected.coordinate.latitude}\n              .longitude=${this.selected.coordinate.longitude}>\n            </sunrise-events-map>\n          </a>\n          <h3 class=\"title\">${this.selected.title}</h3>\n          <div class=\"info\">\n            <div class=\"icon\">\n              <sunrise-events-icon .icon=${'event'}></sunrise-events-icon>\n            </div>\n            <div class=\"detail-section\">\n              <p class=\"date\">\n                ${this.selected.date.toString('full')}\n              </p>\n              <p class=\"time\">\n                ${this.selected.time.toString('full')}\n              </p>\n            </div>\n            <div class=\"icon\">\n              <sunrise-events-icon .icon=${'place'}></sunrise-events-icon>\n            </div>\n            <div class=\"detail-section\">\n              <p class=\"place\">\n                ${this.selected.place}\n              </p>\n              <p class=\"address\">\n                ${this.selected.address}\n              </p>\n            </div>\n            <div class=\"icon\">\n              <sunrise-events-icon .icon=${'info'}></sunrise-events-icon>\n            </div>\n            <div class=\"detail-section info-details\">\n              ${unsafeHTML(this.selected.description)}\n            </div>\n          </div>\n          <div class=\"actions\">\n            <a class=\"button\" href=\"${this.selected.url}\" target=\"_blank\">\n              <sunrise-events-icon .icon=${'launch'}></sunrise-events-icon>\n              <span>RSVP</span>\n            </a>\n          </div>\n        </div>\n      ` :\n      html`\n        <div class=\"empty-container\">\n          Sunrise ${this.hubName} hasn't published any events yet. Check back later!\n        </div>\n      `\n  }\n\n  static styles = css`\n    :host {\n      box-shadow: var(--elevation-box-shadow-01dp);\n      background-color: var(--elevation-overlay-color-01dp);\n      border-radius: var(--shape-border-radius);\n      overflow: hidden;\n      position: relative;\n      width: 100%;\n      height: 100%;\n    }\n    * {\n      box-sizing: border-box;\n    }\n    .selected-container {\n      display: grid;\n      grid-template-rows: 280px auto;\n      min-height: 0;\n      height: 100%;\n    }\n    .empty-container {\n      font-size: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      opacity: 0.6;\n      width: 100%;\n      height: 100%;\n      padding: 64px;\n      text-align: center;\n    }\n\n    .info {\n      padding: 16px;\n      padding-top: 0;\n      display: grid;\n      grid-template-columns: auto auto;\n      grid-auto-flow: dense;\n      min-height: 0;\n      height: 100%;\n      grid-column-gap: 16px;\n      grid-row-gap: 12px;\n    }\n\n    .title {\n      margin: 0;\n      padding: 16px;\n      font-size: 20px;\n      line-height: 1;\n    }\n\n    .icon {\n      font-family: 'Material Icons';\n      font-weight: normal;\n      font-style: normal;\n      font-size: 24px;\n      line-height: 1;\n      letter-spacing: normal;\n      text-transform: none;\n      display: block;\n      white-space: nowrap;\n      word-wrap: normal;\n      direction: ltr;\n      font-feature-settings: 'liga';\n      -webkit-font-feature-settings: 'liga';\n      -webkit-font-smoothing: antialiased;\n    }\n\n    .date {\n      font-size: 20px;\n      margin: 0;\n      line-height: 1;\n    }\n\n    .time {\n      margin: 0;\n    }\n\n    .place {\n      font-size: 20px;\n      margin: 0;\n      line-height: 1;\n    }\n\n    .address {\n      margin: 0;\n    }\n    .info-details {\n      overflow: auto;\n      min-height: 0;\n    }\n    .info-details p {\n      margin-top: 0;\n      margin-bottom: 12px;\n    }\n    .info-details div:last-child p {\n      margin-bottom: 0;\n    }\n    .actions {\n      padding: 16px;\n      padding-top: 0;\n    }\n    .button {\n      display: inline-grid;\n      grid-template-columns: auto auto;\n      grid-column-gap: 4px;\n      padding: 8px 12px;\n      border-radius: var(--shape-border-radius);\n      box-shadow: var(--elevation-box-shadow-01dp);\n      background-color: var(--color-yellow);\n      color: var(--color-charcoal);\n      text-decoration: none;\n      font-weight: 700;\n      min-width: 84px;\n      place-items: center;\n    }\n  `\n}","import { LitElement, html, css, property, customElement } from 'lit-element'\nimport Event from './Event'\nimport Calendar from './Calendar'\nimport Details from './Details'\n\n@customElement('sunrise-events')\nexport default class Events extends LitElement {\n  private static dependencies = [ Calendar, Details ]\n\n  @property({ attribute: false })\n  public events: Array<Event> = []\n\n  @property({ attribute: false })\n  public selected: Event | null = null\n\n  @property({ attribute: false })\n  public hubName: string = ''\n\n  public async update(props: any) {\n    super.update(props)\n    if (props.has('events')) {\n      if (this.events.length && this.selected === null) {\n        await this.updateComplete\n        this.selected = this.sortedEvents()[0]\n      }\n    }\n  }\n\n  private sortedEvents(): Array<Event> {\n    return this.events.sort((a, b) => a.date.compare(b.date))\n  }\n\n  private onSelect = (event: CustomEvent) => {\n    this.selected = (event.target as Calendar).selected\n  }\n\n  public render() {\n    return html`\n      <sunrise-events-calendar\n        .events=${this.events}\n        .selected=${this.selected}\n        @select=${this.onSelect}>\n      </sunrise-events-calendar>\n      <sunrise-events-details\n        .selected=${this.selected}\n        .hubName=${this.hubName}>\n      </sunrise-events-details>\n    `\n  }\n\n  static styles = css`\n    :host {\n      display: grid;\n      position: relative;\n      grid-template-columns: 4.5fr 5.5fr;\n      grid-column-gap: 16px;\n      grid-auto-flow: column;\n      min-height: 0;\n    }\n  `\n}","import ready from 'domready'\nimport Event, { Options } from './Events/Event'\nimport Events from './Events/index'\n\nready(() => {\n  const element = document.querySelector('sunrise-events')! as Events\n  if (element instanceof Events) {\n    element.events = window._data.events.map((e: any) => new Event(e))\n    element.hubName = window._data.hubName\n  }\n})\n"],"sourceRoot":""}